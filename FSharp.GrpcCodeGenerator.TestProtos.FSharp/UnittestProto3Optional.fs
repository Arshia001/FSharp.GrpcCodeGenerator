// <auto-generated>
//     Generated by the F# GRPC code generator. DO NOT EDIT!
//     source: unittest_proto3_optional.proto
// </auto-generated>
namespace rec FSharp.GrpcCodeGenerator.TestProtos.FSharp
#nowarn "40"
module UnittestProto3OptionalReflection =
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestProto3Optional_Descriptor() = Descriptor().MessageTypes.[0]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestProto3Optional_NestedMessage_Descriptor() = TestProto3Optional_Descriptor().NestedTypes.[0]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestProto3OptionalMessage_Descriptor() = Descriptor().MessageTypes.[1]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestProto3OptionalMessage_NestedMessage_Descriptor() = TestProto3OptionalMessage_Descriptor().NestedTypes.[0]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal Proto3OptionalExtensions_Descriptor() = Descriptor().MessageTypes.[2]
    let private descriptorBackingField: global.System.Lazy<global.Google.Protobuf.Reflection.FileDescriptor> =
        let descriptorData = global.System.Convert.FromBase64String("\
            Ch51bml0dGVzdF9wcm90bzNfb3B0aW9uYWwucHJvdG8SEXByb3RvYnVmX3VuaXR0ZXN0GiBnb29nbGUv\
            cHJvdG9idWYvZGVzY3JpcHRvci5wcm90byKPDQoSVGVzdFByb3RvM09wdGlvbmFsEioKDm9wdGlvbmFs\
            X2ludDMyGAEgASgFSABSDW9wdGlvbmFsSW50MzKIAQESKgoOb3B0aW9uYWxfaW50NjQYAiABKANIAVIN\
            b3B0aW9uYWxJbnQ2NIgBARIsCg9vcHRpb25hbF91aW50MzIYAyABKA1IAlIOb3B0aW9uYWxVaW50MzKI\
            AQESLAoPb3B0aW9uYWxfdWludDY0GAQgASgESANSDm9wdGlvbmFsVWludDY0iAEBEiwKD29wdGlvbmFs\
            X3NpbnQzMhgFIAEoEUgEUg5vcHRpb25hbFNpbnQzMogBARIsCg9vcHRpb25hbF9zaW50NjQYBiABKBJI\
            BVIOb3B0aW9uYWxTaW50NjSIAQESLgoQb3B0aW9uYWxfZml4ZWQzMhgHIAEoB0gGUg9vcHRpb25hbEZp\
            eGVkMzKIAQESLgoQb3B0aW9uYWxfZml4ZWQ2NBgIIAEoBkgHUg9vcHRpb25hbEZpeGVkNjSIAQESMAoR\
            b3B0aW9uYWxfc2ZpeGVkMzIYCSABKA9ICFIQb3B0aW9uYWxTZml4ZWQzMogBARIwChFvcHRpb25hbF9z\
            Zml4ZWQ2NBgKIAEoEEgJUhBvcHRpb25hbFNmaXhlZDY0iAEBEioKDm9wdGlvbmFsX2Zsb2F0GAsgASgC\
            SApSDW9wdGlvbmFsRmxvYXSIAQESLAoPb3B0aW9uYWxfZG91YmxlGAwgASgBSAtSDm9wdGlvbmFsRG91\
            YmxliAEBEigKDW9wdGlvbmFsX2Jvb2wYDSABKAhIDFIMb3B0aW9uYWxCb29siAEBEiwKD29wdGlvbmFs\
            X3N0cmluZxgOIAEoCUgNUg5vcHRpb25hbFN0cmluZ4gBARIqCg5vcHRpb25hbF9ieXRlcxgPIAEoDEgO\
            Ug1vcHRpb25hbEJ5dGVziAEBEiwKDW9wdGlvbmFsX2NvcmQYECABKAlCAggBSA9SDG9wdGlvbmFsQ29y\
            ZIgBARJwChdvcHRpb25hbF9uZXN0ZWRfbWVzc2FnZRgSIAEoCzIzLnByb3RvYnVmX3VuaXR0ZXN0LlRl\
            c3RQcm90bzNPcHRpb25hbC5OZXN0ZWRNZXNzYWdlSBBSFW9wdGlvbmFsTmVzdGVkTWVzc2FnZYgBARJs\
            ChNsYXp5X25lc3RlZF9tZXNzYWdlGBMgASgLMjMucHJvdG9idWZfdW5pdHRlc3QuVGVzdFByb3RvM09w\
            dGlvbmFsLk5lc3RlZE1lc3NhZ2VCAigBSBFSEWxhenlOZXN0ZWRNZXNzYWdliAEBEmcKFG9wdGlvbmFs\
            X25lc3RlZF9lbnVtGBUgASgOMjAucHJvdG9idWZfdW5pdHRlc3QuVGVzdFByb3RvM09wdGlvbmFsLk5l\
            c3RlZEVudW1IElISb3B0aW9uYWxOZXN0ZWRFbnVtiAEBEiUKDnNpbmd1bGFyX2ludDMyGBYgASgFUg1z\
            aW5ndWxhckludDMyEiUKDnNpbmd1bGFyX2ludDY0GBcgASgDUg1zaW5ndWxhckludDY0GisKDU5lc3Rl\
            ZE1lc3NhZ2USEwoCYmIYASABKAVIAFICYmKIAQFCBQoDX2JiIkoKCk5lc3RlZEVudW0SDwoLVU5TUEVD\
            SUZJRUQQABIHCgNGT08QARIHCgNCQVIQAhIHCgNCQVoQAxIQCgNORUcQ////////////AUIRCg9fb3B0\
            aW9uYWxfaW50MzJCEQoPX29wdGlvbmFsX2ludDY0QhIKEF9vcHRpb25hbF91aW50MzJCEgoQX29wdGlv\
            bmFsX3VpbnQ2NEISChBfb3B0aW9uYWxfc2ludDMyQhIKEF9vcHRpb25hbF9zaW50NjRCEwoRX29wdGlv\
            bmFsX2ZpeGVkMzJCEwoRX29wdGlvbmFsX2ZpeGVkNjRCFAoSX29wdGlvbmFsX3NmaXhlZDMyQhQKEl9v\
            cHRpb25hbF9zZml4ZWQ2NEIRCg9fb3B0aW9uYWxfZmxvYXRCEgoQX29wdGlvbmFsX2RvdWJsZUIQCg5f\
            b3B0aW9uYWxfYm9vbEISChBfb3B0aW9uYWxfc3RyaW5nQhEKD19vcHRpb25hbF9ieXRlc0IQCg5fb3B0\
            aW9uYWxfY29yZEIaChhfb3B0aW9uYWxfbmVzdGVkX21lc3NhZ2VCFgoUX2xhenlfbmVzdGVkX21lc3Nh\
            Z2VCFwoVX29wdGlvbmFsX25lc3RlZF9lbnVtIrICChlUZXN0UHJvdG8zT3B0aW9uYWxNZXNzYWdlEmEK\
            Dm5lc3RlZF9tZXNzYWdlGAEgASgLMjoucHJvdG9idWZfdW5pdHRlc3QuVGVzdFByb3RvM09wdGlvbmFs\
            TWVzc2FnZS5OZXN0ZWRNZXNzYWdlUg1uZXN0ZWRNZXNzYWdlEncKF29wdGlvbmFsX25lc3RlZF9tZXNz\
            YWdlGAIgASgLMjoucHJvdG9idWZfdW5pdHRlc3QuVGVzdFByb3RvM09wdGlvbmFsTWVzc2FnZS5OZXN0\
            ZWRNZXNzYWdlSABSFW9wdGlvbmFsTmVzdGVkTWVzc2FnZYgBARodCg1OZXN0ZWRNZXNzYWdlEgwKAXMY\
            ASABKAlSAXNCGgoYX29wdGlvbmFsX25lc3RlZF9tZXNzYWdlIskBChhQcm90bzNPcHRpb25hbEV4dGVu\
            c2lvbnMySwoPZXh0X25vX29wdGlvbmFsEh8uZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zGIjN\
            2akBIAEoBVINZXh0Tm9PcHRpb25hbDJSChFleHRfd2l0aF9vcHRpb25hbBIfLmdvb2dsZS5wcm90b2J1\
            Zi5NZXNzYWdlT3B0aW9ucxiJzdmpASABKAVSD2V4dFdpdGhPcHRpb25hbIgBAToMwOjMzQoIyOjMzQoQ\
            QlIKIWNvbS5nb29nbGUucHJvdG9idWYudGVzdGluZy5wcm90b1ABqgIqRlNoYXJwLkdycGNDb2RlR2Vu\
            ZXJhdG9yLlRlc3RQcm90b3MuRlNoYXJwYgZwcm90bzM=")
        global.System.Lazy<_>(
            (fun () ->
                global.Google.Protobuf.Reflection.FileDescriptor.FromGeneratedCode(
                    descriptorData,
                    [|
                        global.Google.Protobuf.FSharp.Reflection.DescriptorReflection.Descriptor()
                    |],
                    new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(
                        null,
                        null,
                        [|
                            new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(typeof<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional>, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Parser, [| "OptionalInt32"; "OptionalInt64"; "OptionalUint32"; "OptionalUint64"; "OptionalSint32"; "OptionalSint64"; "OptionalFixed32"; "OptionalFixed64"; "OptionalSfixed32"; "OptionalSfixed64"; "OptionalFloat"; "OptionalDouble"; "OptionalBool"; "OptionalString"; "OptionalBytes"; "OptionalCord"; "OptionalNestedMessage"; "LazyNestedMessage"; "OptionalNestedEnum"; "SingularInt32"; "SingularInt64" |], [| "OptionalInt32"; "OptionalInt64"; "OptionalUint32"; "OptionalUint64"; "OptionalSint32"; "OptionalSint64"; "OptionalFixed32"; "OptionalFixed64"; "OptionalSfixed32"; "OptionalSfixed64"; "OptionalFloat"; "OptionalDouble"; "OptionalBool"; "OptionalString"; "OptionalBytes"; "OptionalCord"; "OptionalNestedMessage"; "LazyNestedMessage"; "OptionalNestedEnum" |], [| typeof<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.NestedEnum> |], null, [| new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(typeof<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.NestedMessage>, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.NestedMessage.Parser, [| "Bb" |], [| "Bb" |], null, null, null) |])
                            new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(typeof<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3OptionalMessage>, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3OptionalMessage.Parser, [| "NestedMessage"; "OptionalNestedMessage" |], [| "OptionalNestedMessage" |], null, null, [| new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(typeof<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3OptionalMessage.Types.NestedMessage>, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3OptionalMessage.Types.NestedMessage.Parser, [| "S" |], null, null, null, null) |])
                            new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(typeof<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.Proto3OptionalExtensions>, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.Proto3OptionalExtensions.Parser, null, null, null, [| global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.Proto3OptionalExtensions.Extensions.extNoOptional; global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.Proto3OptionalExtensions.Extensions.extWithOptional |], null)
                        |]
                    )
                )
            ),
            true
        )
    let Descriptor(): global.Google.Protobuf.Reflection.FileDescriptor = descriptorBackingField.Value
type TestProto3Optional = {
    mutable _UnknownFields: global.Google.Protobuf.UnknownFieldSet
    mutable SingularInt32: ValueOption<int32>
    mutable SingularInt64: ValueOption<int64>
    mutable OptionalInt32: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalInt32>
    mutable OptionalInt64: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalInt64>
    mutable OptionalUint32: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalUint32>
    mutable OptionalUint64: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalUint64>
    mutable OptionalSint32: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalSint32>
    mutable OptionalSint64: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalSint64>
    mutable OptionalFixed32: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalFixed32>
    mutable OptionalFixed64: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalFixed64>
    mutable OptionalSfixed32: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalSfixed32>
    mutable OptionalSfixed64: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalSfixed64>
    mutable OptionalFloat: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalFloat>
    mutable OptionalDouble: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalDouble>
    mutable OptionalBool: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalBool>
    mutable OptionalString: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalString>
    mutable OptionalBytes: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalBytes>
    mutable OptionalCord: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalCord>
    mutable OptionalNestedMessage: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalNestedMessage>
    mutable LazyNestedMessage: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.LazyNestedMessage>
    mutable OptionalNestedEnum: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalNestedEnum>
} with
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.Clone() : TestProto3Optional = {
        TestProto3Optional._UnknownFields = global.Google.Protobuf.UnknownFieldSet.Clone(me._UnknownFields)
        TestProto3Optional.SingularInt32 = me.SingularInt32
        TestProto3Optional.SingularInt64 = me.SingularInt64
        OptionalInt32 = me.OptionalInt32
        OptionalInt64 = me.OptionalInt64
        OptionalUint32 = me.OptionalUint32
        OptionalUint64 = me.OptionalUint64
        OptionalSint32 = me.OptionalSint32
        OptionalSint64 = me.OptionalSint64
        OptionalFixed32 = me.OptionalFixed32
        OptionalFixed64 = me.OptionalFixed64
        OptionalSfixed32 = me.OptionalSfixed32
        OptionalSfixed64 = me.OptionalSfixed64
        OptionalFloat = me.OptionalFloat
        OptionalDouble = me.OptionalDouble
        OptionalBool = me.OptionalBool
        OptionalString = me.OptionalString
        OptionalBytes = me.OptionalBytes
        OptionalCord = me.OptionalCord
        OptionalNestedMessage = me.OptionalNestedMessage
        LazyNestedMessage = me.LazyNestedMessage
        OptionalNestedEnum = me.OptionalNestedEnum
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalWriteTo(output: byref<global.Google.Protobuf.WriteContext>) =
        if me.SingularInt32 <> ValueNone
        then
            output.WriteRawTag(176uy, 1uy)
            output.WriteInt32(me.SingularInt32.Value)
        if me.SingularInt64 <> ValueNone
        then
            output.WriteRawTag(184uy, 1uy)
            output.WriteInt64(me.SingularInt64.Value)
        match me.OptionalInt32 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalInt32 x) ->
            output.WriteRawTag(8uy)
            output.WriteInt32(x)
        match me.OptionalInt64 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalInt64 x) ->
            output.WriteRawTag(16uy)
            output.WriteInt64(x)
        match me.OptionalUint32 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalUint32 x) ->
            output.WriteRawTag(24uy)
            output.WriteUInt32(x)
        match me.OptionalUint64 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalUint64 x) ->
            output.WriteRawTag(32uy)
            output.WriteUInt64(x)
        match me.OptionalSint32 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalSint32 x) ->
            output.WriteRawTag(40uy)
            output.WriteSInt32(x)
        match me.OptionalSint64 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalSint64 x) ->
            output.WriteRawTag(48uy)
            output.WriteSInt64(x)
        match me.OptionalFixed32 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalFixed32 x) ->
            output.WriteRawTag(61uy)
            output.WriteFixed32(x)
        match me.OptionalFixed64 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalFixed64 x) ->
            output.WriteRawTag(65uy)
            output.WriteFixed64(x)
        match me.OptionalSfixed32 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalSfixed32 x) ->
            output.WriteRawTag(77uy)
            output.WriteSFixed32(x)
        match me.OptionalSfixed64 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalSfixed64 x) ->
            output.WriteRawTag(81uy)
            output.WriteSFixed64(x)
        match me.OptionalFloat with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalFloat x) ->
            output.WriteRawTag(93uy)
            output.WriteFloat(x)
        match me.OptionalDouble with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalDouble x) ->
            output.WriteRawTag(97uy)
            output.WriteDouble(x)
        match me.OptionalBool with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalBool x) ->
            output.WriteRawTag(104uy)
            output.WriteBool(x)
        match me.OptionalString with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalString x) ->
            output.WriteRawTag(114uy)
            output.WriteString(x)
        match me.OptionalBytes with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalBytes x) ->
            output.WriteRawTag(122uy)
            output.WriteBytes(x)
        match me.OptionalCord with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalCord x) ->
            output.WriteRawTag(130uy, 1uy)
            output.WriteString(x)
        match me.OptionalNestedMessage with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalNestedMessage x) ->
            output.WriteRawTag(146uy, 1uy)
            output.WriteMessage(x)
        match me.LazyNestedMessage with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.LazyNestedMessage x) ->
            output.WriteRawTag(154uy, 1uy)
            output.WriteMessage(x)
        match me.OptionalNestedEnum with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalNestedEnum x) ->
            output.WriteRawTag(168uy, 1uy)
            output.WriteEnum(int x)
        if not <| isNull me._UnknownFields then me._UnknownFields.WriteTo(&output)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.CalculateSize() =
        let mutable size = 0
        if me.SingularInt32 <> ValueNone then size <- size + 2 + global.Google.Protobuf.CodedOutputStream.ComputeInt32Size(me.SingularInt32.Value)
        if me.SingularInt64 <> ValueNone then size <- size + 2 + global.Google.Protobuf.CodedOutputStream.ComputeInt64Size(me.SingularInt64.Value)
        match me.OptionalInt32 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalInt32 x) -> size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeInt32Size(x)
        match me.OptionalInt64 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalInt64 x) -> size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeInt64Size(x)
        match me.OptionalUint32 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalUint32 x) -> size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeUInt32Size(x)
        match me.OptionalUint64 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalUint64 x) -> size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeUInt64Size(x)
        match me.OptionalSint32 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalSint32 x) -> size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeSInt32Size(x)
        match me.OptionalSint64 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalSint64 x) -> size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeSInt64Size(x)
        match me.OptionalFixed32 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalFixed32 x) -> size <- size + 5
        match me.OptionalFixed64 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalFixed64 x) -> size <- size + 9
        match me.OptionalSfixed32 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalSfixed32 x) -> size <- size + 5
        match me.OptionalSfixed64 with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalSfixed64 x) -> size <- size + 9
        match me.OptionalFloat with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalFloat x) -> size <- size + 5
        match me.OptionalDouble with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalDouble x) -> size <- size + 9
        match me.OptionalBool with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalBool x) -> size <- size + 2
        match me.OptionalString with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalString x) -> size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeStringSize(x)
        match me.OptionalBytes with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalBytes x) -> size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeBytesSize(x)
        match me.OptionalCord with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalCord x) -> size <- size + 2 + global.Google.Protobuf.CodedOutputStream.ComputeStringSize(x)
        match me.OptionalNestedMessage with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalNestedMessage x) -> size <- size + 2 + global.Google.Protobuf.CodedOutputStream.ComputeMessageSize(x)
        match me.LazyNestedMessage with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.LazyNestedMessage x) -> size <- size + 2 + global.Google.Protobuf.CodedOutputStream.ComputeMessageSize(x)
        match me.OptionalNestedEnum with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalNestedEnum x) -> size <- size + 2 + global.Google.Protobuf.CodedOutputStream.ComputeEnumSize(int x)
        if not <| isNull me._UnknownFields then size <- size + me._UnknownFields.CalculateSize()
        size
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.MergeFrom(other: TestProto3Optional) =
        if other.SingularInt32 <> ValueNone
        then me.SingularInt32 <- other.SingularInt32
        if other.SingularInt64 <> ValueNone
        then me.SingularInt64 <- other.SingularInt64
        if other.OptionalInt32 <> ValueNone
        then me.OptionalInt32 <- other.OptionalInt32
        if other.OptionalInt64 <> ValueNone
        then me.OptionalInt64 <- other.OptionalInt64
        if other.OptionalUint32 <> ValueNone
        then me.OptionalUint32 <- other.OptionalUint32
        if other.OptionalUint64 <> ValueNone
        then me.OptionalUint64 <- other.OptionalUint64
        if other.OptionalSint32 <> ValueNone
        then me.OptionalSint32 <- other.OptionalSint32
        if other.OptionalSint64 <> ValueNone
        then me.OptionalSint64 <- other.OptionalSint64
        if other.OptionalFixed32 <> ValueNone
        then me.OptionalFixed32 <- other.OptionalFixed32
        if other.OptionalFixed64 <> ValueNone
        then me.OptionalFixed64 <- other.OptionalFixed64
        if other.OptionalSfixed32 <> ValueNone
        then me.OptionalSfixed32 <- other.OptionalSfixed32
        if other.OptionalSfixed64 <> ValueNone
        then me.OptionalSfixed64 <- other.OptionalSfixed64
        if other.OptionalFloat <> ValueNone
        then me.OptionalFloat <- other.OptionalFloat
        if other.OptionalDouble <> ValueNone
        then me.OptionalDouble <- other.OptionalDouble
        if other.OptionalBool <> ValueNone
        then me.OptionalBool <- other.OptionalBool
        if other.OptionalString <> ValueNone
        then me.OptionalString <- other.OptionalString
        if other.OptionalBytes <> ValueNone
        then me.OptionalBytes <- other.OptionalBytes
        if other.OptionalCord <> ValueNone
        then me.OptionalCord <- other.OptionalCord
        if other.OptionalNestedMessage <> ValueNone
        then me.OptionalNestedMessage <- other.OptionalNestedMessage
        if other.LazyNestedMessage <> ValueNone
        then me.LazyNestedMessage <- other.LazyNestedMessage
        if other.OptionalNestedEnum <> ValueNone
        then me.OptionalNestedEnum <- other.OptionalNestedEnum
        me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFrom(me._UnknownFields, other._UnknownFields)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalMergeFrom(input: byref<global.Google.Protobuf.ParseContext>) =
        let mutable tag = input.ReadTag()
        while tag <> 0u do
            match tag with
            | 176u ->
                me.SingularInt32 <- ValueSome(input.ReadInt32())
            | 184u ->
                me.SingularInt64 <- ValueSome(input.ReadInt64())
            | 8u ->
                let value = input.ReadInt32()
                me.OptionalInt32 <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalInt32(value))
            | 16u ->
                let value = input.ReadInt64()
                me.OptionalInt64 <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalInt64(value))
            | 24u ->
                let value = input.ReadUInt32()
                me.OptionalUint32 <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalUint32(value))
            | 32u ->
                let value = input.ReadUInt64()
                me.OptionalUint64 <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalUint64(value))
            | 40u ->
                let value = input.ReadSInt32()
                me.OptionalSint32 <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalSint32(value))
            | 48u ->
                let value = input.ReadSInt64()
                me.OptionalSint64 <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalSint64(value))
            | 61u ->
                let value = input.ReadFixed32()
                me.OptionalFixed32 <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalFixed32(value))
            | 65u ->
                let value = input.ReadFixed64()
                me.OptionalFixed64 <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalFixed64(value))
            | 77u ->
                let value = input.ReadSFixed32()
                me.OptionalSfixed32 <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalSfixed32(value))
            | 81u ->
                let value = input.ReadSFixed64()
                me.OptionalSfixed64 <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalSfixed64(value))
            | 93u ->
                let value = input.ReadFloat()
                me.OptionalFloat <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalFloat(value))
            | 97u ->
                let value = input.ReadDouble()
                me.OptionalDouble <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalDouble(value))
            | 104u ->
                let value = input.ReadBool()
                me.OptionalBool <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalBool(value))
            | 114u ->
                let value = input.ReadString()
                me.OptionalString <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalString(value))
            | 122u ->
                let value = input.ReadBytes()
                me.OptionalBytes <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalBytes(value))
            | 130u ->
                let value = input.ReadString()
                me.OptionalCord <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalCord(value))
            | 146u ->
                let value = global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.NestedMessage.empty()
                input.ReadMessage(value)
                me.OptionalNestedMessage <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalNestedMessage(value))
            | 154u ->
                let value = global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.NestedMessage.empty()
                input.ReadMessage(value)
                me.LazyNestedMessage <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.LazyNestedMessage(value))
            | 168u ->
                let value = enum(input.ReadEnum()) : global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.NestedEnum
                me.OptionalNestedEnum <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.OptionalNestedEnum(value))
            | _ ->
                me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFieldFrom(me._UnknownFields, &input)
            tag <- input.ReadTag()
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalInt32 =
        match me.OptionalInt32 with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalInt32 () = me.OptionalInt32 <- ValueNone
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalInt64 =
        match me.OptionalInt64 with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalInt64 () = me.OptionalInt64 <- ValueNone
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalUint32 =
        match me.OptionalUint32 with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalUint32 () = me.OptionalUint32 <- ValueNone
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalUint64 =
        match me.OptionalUint64 with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalUint64 () = me.OptionalUint64 <- ValueNone
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalSint32 =
        match me.OptionalSint32 with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalSint32 () = me.OptionalSint32 <- ValueNone
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalSint64 =
        match me.OptionalSint64 with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalSint64 () = me.OptionalSint64 <- ValueNone
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalFixed32 =
        match me.OptionalFixed32 with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalFixed32 () = me.OptionalFixed32 <- ValueNone
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalFixed64 =
        match me.OptionalFixed64 with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalFixed64 () = me.OptionalFixed64 <- ValueNone
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalSfixed32 =
        match me.OptionalSfixed32 with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalSfixed32 () = me.OptionalSfixed32 <- ValueNone
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalSfixed64 =
        match me.OptionalSfixed64 with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalSfixed64 () = me.OptionalSfixed64 <- ValueNone
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalFloat =
        match me.OptionalFloat with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalFloat () = me.OptionalFloat <- ValueNone
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalDouble =
        match me.OptionalDouble with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalDouble () = me.OptionalDouble <- ValueNone
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalBool =
        match me.OptionalBool with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalBool () = me.OptionalBool <- ValueNone
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalString =
        match me.OptionalString with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalString () = me.OptionalString <- ValueNone
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalBytes =
        match me.OptionalBytes with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalBytes () = me.OptionalBytes <- ValueNone
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalCord =
        match me.OptionalCord with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalCord () = me.OptionalCord <- ValueNone
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalNestedMessage =
        match me.OptionalNestedMessage with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalNestedMessage () = me.OptionalNestedMessage <- ValueNone
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasLazyNestedMessage =
        match me.LazyNestedMessage with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearLazyNestedMessage () = me.LazyNestedMessage <- ValueNone
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalNestedEnum =
        match me.OptionalNestedEnum with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalNestedEnum () = me.OptionalNestedEnum <- ValueNone
    interface global.Google.Protobuf.IBufferMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalMergeFrom(ctx) = me.InternalMergeFrom(&ctx)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalWriteTo(ctx) = me.InternalWriteTo(&ctx)
    interface global.Google.Protobuf.IMessage<TestProto3Optional> with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.Clone() = me.Clone()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(other) = me.MergeFrom(other)
    interface global.Google.Protobuf.IMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.CalculateSize() = me.CalculateSize()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(input) = input.ReadRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.WriteTo(output) = output.WriteRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member __.Descriptor = global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.UnittestProto3OptionalReflection.TestProto3Optional_Descriptor()
module TestProto3Optional =
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal DefaultValue = {
        TestProto3Optional._UnknownFields = null
        TestProto3Optional.SingularInt32 = ValueNone
        TestProto3Optional.SingularInt64 = ValueNone
        OptionalInt32 = ValueNone
        OptionalInt64 = ValueNone
        OptionalUint32 = ValueNone
        OptionalUint64 = ValueNone
        OptionalSint32 = ValueNone
        OptionalSint64 = ValueNone
        OptionalFixed32 = ValueNone
        OptionalFixed64 = ValueNone
        OptionalSfixed32 = ValueNone
        OptionalSfixed64 = ValueNone
        OptionalFloat = ValueNone
        OptionalDouble = ValueNone
        OptionalBool = ValueNone
        OptionalString = ValueNone
        OptionalBytes = ValueNone
        OptionalCord = ValueNone
        OptionalNestedMessage = ValueNone
        LazyNestedMessage = ValueNone
        OptionalNestedEnum = ValueNone
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let empty () = {
        TestProto3Optional._UnknownFields = null
        TestProto3Optional.SingularInt32 = ValueNone
        TestProto3Optional.SingularInt64 = ValueNone
        OptionalInt32 = ValueNone
        OptionalInt64 = ValueNone
        OptionalUint32 = ValueNone
        OptionalUint64 = ValueNone
        OptionalSint32 = ValueNone
        OptionalSint64 = ValueNone
        OptionalFixed32 = ValueNone
        OptionalFixed64 = ValueNone
        OptionalSfixed32 = ValueNone
        OptionalSfixed64 = ValueNone
        OptionalFloat = ValueNone
        OptionalDouble = ValueNone
        OptionalBool = ValueNone
        OptionalString = ValueNone
        OptionalBytes = ValueNone
        OptionalCord = ValueNone
        OptionalNestedMessage = ValueNone
        LazyNestedMessage = ValueNone
        OptionalNestedEnum = ValueNone
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let Parser = global.Google.Protobuf.MessageParser<TestProto3Optional>(global.System.Func<_>(empty))
    let OptionalInt32FieldNumber = 1
    let OptionalInt64FieldNumber = 2
    let OptionalUint32FieldNumber = 3
    let OptionalUint64FieldNumber = 4
    let OptionalSint32FieldNumber = 5
    let OptionalSint64FieldNumber = 6
    let OptionalFixed32FieldNumber = 7
    let OptionalFixed64FieldNumber = 8
    let OptionalSfixed32FieldNumber = 9
    let OptionalSfixed64FieldNumber = 10
    let OptionalFloatFieldNumber = 11
    let OptionalDoubleFieldNumber = 12
    let OptionalBoolFieldNumber = 13
    let OptionalStringFieldNumber = 14
    let OptionalBytesFieldNumber = 15
    let OptionalCordFieldNumber = 16
    let OptionalNestedMessageFieldNumber = 18
    let LazyNestedMessageFieldNumber = 19
    let OptionalNestedEnumFieldNumber = 21
    let SingularInt32FieldNumber = 22
    let SingularInt64FieldNumber = 23
    module Types =
        type OptionalInt32 =
        | OptionalInt32 of int32
        type OptionalInt64 =
        | OptionalInt64 of int64
        type OptionalUint32 =
        | OptionalUint32 of uint32
        type OptionalUint64 =
        | OptionalUint64 of uint64
        type OptionalSint32 =
        | OptionalSint32 of int32
        type OptionalSint64 =
        | OptionalSint64 of int64
        type OptionalFixed32 =
        | OptionalFixed32 of uint32
        type OptionalFixed64 =
        | OptionalFixed64 of uint64
        type OptionalSfixed32 =
        | OptionalSfixed32 of int32
        type OptionalSfixed64 =
        | OptionalSfixed64 of int64
        type OptionalFloat =
        | OptionalFloat of float32
        type OptionalDouble =
        | OptionalDouble of float
        type OptionalBool =
        | OptionalBool of bool
        type OptionalString =
        | OptionalString of string
        type OptionalBytes =
        | OptionalBytes of global.Google.Protobuf.ByteString
        type OptionalCord =
        | OptionalCord of string
        type OptionalNestedMessage =
        | OptionalNestedMessage of global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.NestedMessage
        type LazyNestedMessage =
        | LazyNestedMessage of global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.NestedMessage
        type OptionalNestedEnum =
        | OptionalNestedEnum of global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.NestedEnum
        type NestedEnum =
        | [<global.Google.Protobuf.Reflection.OriginalName("UNSPECIFIED")>] Unspecified = 0
        | [<global.Google.Protobuf.Reflection.OriginalName("FOO")>] Foo = 1
        | [<global.Google.Protobuf.Reflection.OriginalName("BAR")>] Bar = 2
        | [<global.Google.Protobuf.Reflection.OriginalName("BAZ")>] Baz = 3
        | [<global.Google.Protobuf.Reflection.OriginalName("NEG")>] Neg = -1
        type NestedMessage = {
            mutable _UnknownFields: global.Google.Protobuf.UnknownFieldSet
            mutable Bb: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.NestedMessage.Types.Bb>
        } with
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            member me.Clone() : NestedMessage = {
                NestedMessage._UnknownFields = global.Google.Protobuf.UnknownFieldSet.Clone(me._UnknownFields)
                Bb = me.Bb
            }
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            member private me.InternalWriteTo(output: byref<global.Google.Protobuf.WriteContext>) =
                match me.Bb with
                | ValueNone -> ()
                | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.NestedMessage.Types.Bb x) ->
                    output.WriteRawTag(8uy)
                    output.WriteInt32(x)
                if not <| isNull me._UnknownFields then me._UnknownFields.WriteTo(&output)
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            member private me.CalculateSize() =
                let mutable size = 0
                match me.Bb with
                | ValueNone -> ()
                | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.NestedMessage.Types.Bb x) -> size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeInt32Size(x)
                if not <| isNull me._UnknownFields then size <- size + me._UnknownFields.CalculateSize()
                size
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            member private me.MergeFrom(other: NestedMessage) =
                if other.Bb <> ValueNone
                then me.Bb <- other.Bb
                me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFrom(me._UnknownFields, other._UnknownFields)
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            member private me.InternalMergeFrom(input: byref<global.Google.Protobuf.ParseContext>) =
                let mutable tag = input.ReadTag()
                while tag <> 0u do
                    match tag with
                    | 8u ->
                        let value = input.ReadInt32()
                        me.Bb <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3Optional.Types.NestedMessage.Types.Bb(value))
                    | _ ->
                        me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFieldFrom(me._UnknownFields, &input)
                    tag <- input.ReadTag()
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            member me.HasBb =
                match me.Bb with
                | ValueNone -> false
                | ValueSome(_) -> true
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            member me.ClearBb () = me.Bb <- ValueNone
            interface global.Google.Protobuf.IBufferMessage with
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.InternalMergeFrom(ctx) = me.InternalMergeFrom(&ctx)
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.InternalWriteTo(ctx) = me.InternalWriteTo(&ctx)
            interface global.Google.Protobuf.IMessage<NestedMessage> with
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.Clone() = me.Clone()
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.MergeFrom(other) = me.MergeFrom(other)
            interface global.Google.Protobuf.IMessage with
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.CalculateSize() = me.CalculateSize()
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.MergeFrom(input) = input.ReadRawMessage(me)
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.WriteTo(output) = output.WriteRawMessage(me)
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member __.Descriptor = global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.UnittestProto3OptionalReflection.TestProto3Optional_NestedMessage_Descriptor()
        module NestedMessage =
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            let internal DefaultValue = {
                NestedMessage._UnknownFields = null
                Bb = ValueNone
            }
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            let empty () = {
                NestedMessage._UnknownFields = null
                Bb = ValueNone
            }
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            let Parser = global.Google.Protobuf.MessageParser<NestedMessage>(global.System.Func<_>(empty))
            let BbFieldNumber = 1
            module Types =
                type Bb =
                | Bb of int32
type TestProto3OptionalMessage = {
    mutable _UnknownFields: global.Google.Protobuf.UnknownFieldSet
    mutable NestedMessage: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3OptionalMessage.Types.NestedMessage>
    mutable OptionalNestedMessage: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3OptionalMessage.Types.OptionalNestedMessage>
} with
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.Clone() : TestProto3OptionalMessage = {
        TestProto3OptionalMessage._UnknownFields = global.Google.Protobuf.UnknownFieldSet.Clone(me._UnknownFields)
        TestProto3OptionalMessage.NestedMessage = me.NestedMessage |> global.Microsoft.FSharp.Core.ValueOption.map (fun x -> (x :> global.Google.Protobuf.IMessage<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3OptionalMessage.Types.NestedMessage>).Clone())
        OptionalNestedMessage = me.OptionalNestedMessage
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalWriteTo(output: byref<global.Google.Protobuf.WriteContext>) =
        if me.NestedMessage <> ValueNone
        then
            output.WriteRawTag(10uy)
            output.WriteMessage(me.NestedMessage.Value)
        match me.OptionalNestedMessage with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3OptionalMessage.Types.OptionalNestedMessage x) ->
            output.WriteRawTag(18uy)
            output.WriteMessage(x)
        if not <| isNull me._UnknownFields then me._UnknownFields.WriteTo(&output)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.CalculateSize() =
        let mutable size = 0
        if me.NestedMessage <> ValueNone then size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeMessageSize(me.NestedMessage.Value)
        match me.OptionalNestedMessage with
        | ValueNone -> ()
        | ValueSome (global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3OptionalMessage.Types.OptionalNestedMessage x) -> size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeMessageSize(x)
        if not <| isNull me._UnknownFields then size <- size + me._UnknownFields.CalculateSize()
        size
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.MergeFrom(other: TestProto3OptionalMessage) =
        if other.NestedMessage <> ValueNone
        then
            if me.NestedMessage.IsNone
            then me.NestedMessage <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3OptionalMessage.Types.NestedMessage.empty())
            (me.NestedMessage.Value :> global.Google.Protobuf.IMessage<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3OptionalMessage.Types.NestedMessage>).MergeFrom(other.NestedMessage.Value)
        if other.OptionalNestedMessage <> ValueNone
        then me.OptionalNestedMessage <- other.OptionalNestedMessage
        me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFrom(me._UnknownFields, other._UnknownFields)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalMergeFrom(input: byref<global.Google.Protobuf.ParseContext>) =
        let mutable tag = input.ReadTag()
        while tag <> 0u do
            match tag with
            | 10u ->
                if me.NestedMessage.IsNone
                then me.NestedMessage <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3OptionalMessage.Types.NestedMessage.empty())
                input.ReadMessage(me.NestedMessage.Value)
            | 18u ->
                let value = global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3OptionalMessage.Types.NestedMessage.empty()
                input.ReadMessage(value)
                me.OptionalNestedMessage <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3OptionalMessage.Types.OptionalNestedMessage(value))
            | _ ->
                me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFieldFrom(me._UnknownFields, &input)
            tag <- input.ReadTag()
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.HasOptionalNestedMessage =
        match me.OptionalNestedMessage with
        | ValueNone -> false
        | ValueSome(_) -> true
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.ClearOptionalNestedMessage () = me.OptionalNestedMessage <- ValueNone
    interface global.Google.Protobuf.IBufferMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalMergeFrom(ctx) = me.InternalMergeFrom(&ctx)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalWriteTo(ctx) = me.InternalWriteTo(&ctx)
    interface global.Google.Protobuf.IMessage<TestProto3OptionalMessage> with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.Clone() = me.Clone()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(other) = me.MergeFrom(other)
    interface global.Google.Protobuf.IMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.CalculateSize() = me.CalculateSize()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(input) = input.ReadRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.WriteTo(output) = output.WriteRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member __.Descriptor = global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.UnittestProto3OptionalReflection.TestProto3OptionalMessage_Descriptor()
module TestProto3OptionalMessage =
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal DefaultValue = {
        TestProto3OptionalMessage._UnknownFields = null
        TestProto3OptionalMessage.NestedMessage = ValueNone
        OptionalNestedMessage = ValueNone
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let empty () = {
        TestProto3OptionalMessage._UnknownFields = null
        TestProto3OptionalMessage.NestedMessage = ValueNone
        OptionalNestedMessage = ValueNone
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let Parser = global.Google.Protobuf.MessageParser<TestProto3OptionalMessage>(global.System.Func<_>(empty))
    let NestedMessageFieldNumber = 1
    let OptionalNestedMessageFieldNumber = 2
    module Types =
        type OptionalNestedMessage =
        | OptionalNestedMessage of global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestProto3OptionalMessage.Types.NestedMessage
        type NestedMessage = {
            mutable _UnknownFields: global.Google.Protobuf.UnknownFieldSet
            mutable S: ValueOption<string>
        } with
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            member me.Clone() : NestedMessage = {
                NestedMessage._UnknownFields = global.Google.Protobuf.UnknownFieldSet.Clone(me._UnknownFields)
                NestedMessage.S = me.S
            }
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            member private me.InternalWriteTo(output: byref<global.Google.Protobuf.WriteContext>) =
                if me.S <> ValueNone
                then
                    output.WriteRawTag(10uy)
                    output.WriteString(me.S.Value)
                if not <| isNull me._UnknownFields then me._UnknownFields.WriteTo(&output)
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            member private me.CalculateSize() =
                let mutable size = 0
                if me.S <> ValueNone then size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeStringSize(me.S.Value)
                if not <| isNull me._UnknownFields then size <- size + me._UnknownFields.CalculateSize()
                size
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            member private me.MergeFrom(other: NestedMessage) =
                if other.S <> ValueNone
                then me.S <- other.S
                me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFrom(me._UnknownFields, other._UnknownFields)
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            member private me.InternalMergeFrom(input: byref<global.Google.Protobuf.ParseContext>) =
                let mutable tag = input.ReadTag()
                while tag <> 0u do
                    match tag with
                    | 10u ->
                        me.S <- ValueSome(input.ReadString())
                    | _ ->
                        me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFieldFrom(me._UnknownFields, &input)
                    tag <- input.ReadTag()
            interface global.Google.Protobuf.IBufferMessage with
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.InternalMergeFrom(ctx) = me.InternalMergeFrom(&ctx)
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.InternalWriteTo(ctx) = me.InternalWriteTo(&ctx)
            interface global.Google.Protobuf.IMessage<NestedMessage> with
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.Clone() = me.Clone()
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.MergeFrom(other) = me.MergeFrom(other)
            interface global.Google.Protobuf.IMessage with
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.CalculateSize() = me.CalculateSize()
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.MergeFrom(input) = input.ReadRawMessage(me)
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.WriteTo(output) = output.WriteRawMessage(me)
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member __.Descriptor = global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.UnittestProto3OptionalReflection.TestProto3OptionalMessage_NestedMessage_Descriptor()
        module NestedMessage =
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            let internal DefaultValue = {
                NestedMessage._UnknownFields = null
                NestedMessage.S = ValueNone
            }
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            let empty () = {
                NestedMessage._UnknownFields = null
                NestedMessage.S = ValueNone
            }
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            let Parser = global.Google.Protobuf.MessageParser<NestedMessage>(global.System.Func<_>(empty))
            let SFieldNumber = 1
type Proto3OptionalExtensions = {
    mutable _UnknownFields: global.Google.Protobuf.UnknownFieldSet
} with
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.Clone() : Proto3OptionalExtensions = {
        Proto3OptionalExtensions._UnknownFields = global.Google.Protobuf.UnknownFieldSet.Clone(me._UnknownFields)
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalWriteTo(output: byref<global.Google.Protobuf.WriteContext>) =
        if not <| isNull me._UnknownFields then me._UnknownFields.WriteTo(&output)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.CalculateSize() =
        let mutable size = 0
        if not <| isNull me._UnknownFields then size <- size + me._UnknownFields.CalculateSize()
        size
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.MergeFrom(other: Proto3OptionalExtensions) =
        me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFrom(me._UnknownFields, other._UnknownFields)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalMergeFrom(input: byref<global.Google.Protobuf.ParseContext>) =
        let mutable tag = input.ReadTag()
        while tag <> 0u do
            match tag with
            | _ ->
                me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFieldFrom(me._UnknownFields, &input)
            tag <- input.ReadTag()
    interface global.Google.Protobuf.IBufferMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalMergeFrom(ctx) = me.InternalMergeFrom(&ctx)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalWriteTo(ctx) = me.InternalWriteTo(&ctx)
    interface global.Google.Protobuf.IMessage<Proto3OptionalExtensions> with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.Clone() = me.Clone()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(other) = me.MergeFrom(other)
    interface global.Google.Protobuf.IMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.CalculateSize() = me.CalculateSize()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(input) = input.ReadRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.WriteTo(output) = output.WriteRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member __.Descriptor = global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.UnittestProto3OptionalReflection.Proto3OptionalExtensions_Descriptor()
module Proto3OptionalExtensions =
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal DefaultValue = {
        Proto3OptionalExtensions._UnknownFields = null
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let empty () = {
        Proto3OptionalExtensions._UnknownFields = null
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let Parser = global.Google.Protobuf.MessageParser<Proto3OptionalExtensions>(global.System.Func<_>(empty))
    module Extensions =
        let extNoOptional = global.Google.Protobuf.Extension<global.Google.Protobuf.Reflection.MessageOptions,int32>(355886728, global.Google.Protobuf.FieldCodec.ForInt32(2847093824u, 0))
        let extWithOptional = global.Google.Protobuf.Extension<global.Google.Protobuf.Reflection.MessageOptions,int32>(355886729, global.Google.Protobuf.FieldCodec.ForInt32(2847093832u, 0))

// End of auto-generated code
