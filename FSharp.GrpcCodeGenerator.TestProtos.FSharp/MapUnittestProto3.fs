// <auto-generated>
//     Generated by the F# GRPC code generator. DO NOT EDIT!
//     source: map_unittest_proto3.proto
// </auto-generated>
namespace rec FSharp.GrpcCodeGenerator.TestProtos.FSharp
#nowarn "40"
module MapUnittestProto3Reflection =
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMap_Descriptor() = Descriptor().MessageTypes.[0]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMap_MapInt32Int32Entry_Descriptor() = TestMap_Descriptor().NestedTypes.[0]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMap_MapInt64Int64Entry_Descriptor() = TestMap_Descriptor().NestedTypes.[1]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMap_MapUint32Uint32Entry_Descriptor() = TestMap_Descriptor().NestedTypes.[2]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMap_MapUint64Uint64Entry_Descriptor() = TestMap_Descriptor().NestedTypes.[3]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMap_MapSint32Sint32Entry_Descriptor() = TestMap_Descriptor().NestedTypes.[4]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMap_MapSint64Sint64Entry_Descriptor() = TestMap_Descriptor().NestedTypes.[5]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMap_MapFixed32Fixed32Entry_Descriptor() = TestMap_Descriptor().NestedTypes.[6]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMap_MapFixed64Fixed64Entry_Descriptor() = TestMap_Descriptor().NestedTypes.[7]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMap_MapSfixed32Sfixed32Entry_Descriptor() = TestMap_Descriptor().NestedTypes.[8]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMap_MapSfixed64Sfixed64Entry_Descriptor() = TestMap_Descriptor().NestedTypes.[9]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMap_MapInt32FloatEntry_Descriptor() = TestMap_Descriptor().NestedTypes.[10]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMap_MapInt32DoubleEntry_Descriptor() = TestMap_Descriptor().NestedTypes.[11]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMap_MapBoolBoolEntry_Descriptor() = TestMap_Descriptor().NestedTypes.[12]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMap_MapStringStringEntry_Descriptor() = TestMap_Descriptor().NestedTypes.[13]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMap_MapInt32BytesEntry_Descriptor() = TestMap_Descriptor().NestedTypes.[14]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMap_MapInt32EnumEntry_Descriptor() = TestMap_Descriptor().NestedTypes.[15]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMap_MapInt32ForeignMessageEntry_Descriptor() = TestMap_Descriptor().NestedTypes.[16]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMapSubmessage_Descriptor() = Descriptor().MessageTypes.[1]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMessageMap_Descriptor() = Descriptor().MessageTypes.[2]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestMessageMap_MapInt32MessageEntry_Descriptor() = TestMessageMap_Descriptor().NestedTypes.[0]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestSameTypeMap_Descriptor() = Descriptor().MessageTypes.[3]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestSameTypeMap_Map1Entry_Descriptor() = TestSameTypeMap_Descriptor().NestedTypes.[0]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestSameTypeMap_Map2Entry_Descriptor() = TestSameTypeMap_Descriptor().NestedTypes.[1]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestArenaMap_Descriptor() = Descriptor().MessageTypes.[4]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestArenaMap_MapInt32Int32Entry_Descriptor() = TestArenaMap_Descriptor().NestedTypes.[0]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestArenaMap_MapInt64Int64Entry_Descriptor() = TestArenaMap_Descriptor().NestedTypes.[1]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestArenaMap_MapUint32Uint32Entry_Descriptor() = TestArenaMap_Descriptor().NestedTypes.[2]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestArenaMap_MapUint64Uint64Entry_Descriptor() = TestArenaMap_Descriptor().NestedTypes.[3]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestArenaMap_MapSint32Sint32Entry_Descriptor() = TestArenaMap_Descriptor().NestedTypes.[4]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestArenaMap_MapSint64Sint64Entry_Descriptor() = TestArenaMap_Descriptor().NestedTypes.[5]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestArenaMap_MapFixed32Fixed32Entry_Descriptor() = TestArenaMap_Descriptor().NestedTypes.[6]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestArenaMap_MapFixed64Fixed64Entry_Descriptor() = TestArenaMap_Descriptor().NestedTypes.[7]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestArenaMap_MapSfixed32Sfixed32Entry_Descriptor() = TestArenaMap_Descriptor().NestedTypes.[8]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestArenaMap_MapSfixed64Sfixed64Entry_Descriptor() = TestArenaMap_Descriptor().NestedTypes.[9]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestArenaMap_MapInt32FloatEntry_Descriptor() = TestArenaMap_Descriptor().NestedTypes.[10]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestArenaMap_MapInt32DoubleEntry_Descriptor() = TestArenaMap_Descriptor().NestedTypes.[11]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestArenaMap_MapBoolBoolEntry_Descriptor() = TestArenaMap_Descriptor().NestedTypes.[12]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestArenaMap_MapInt32EnumEntry_Descriptor() = TestArenaMap_Descriptor().NestedTypes.[13]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal TestArenaMap_MapInt32ForeignMessageEntry_Descriptor() = TestArenaMap_Descriptor().NestedTypes.[14]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal MessageContainingEnumCalledType_Descriptor() = Descriptor().MessageTypes.[5]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal MessageContainingEnumCalledType_TypeEntry_Descriptor() = MessageContainingEnumCalledType_Descriptor().NestedTypes.[0]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal MessageContainingMapCalledEntry_Descriptor() = Descriptor().MessageTypes.[6]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal MessageContainingMapCalledEntry_EntryEntry_Descriptor() = MessageContainingMapCalledEntry_Descriptor().NestedTypes.[0]
    let private descriptorBackingField: global.System.Lazy<global.Google.Protobuf.Reflection.FileDescriptor> =
        let descriptorData = global.System.Convert.FromBase64String("\
            ChltYXBfdW5pdHRlc3RfcHJvdG8zLnByb3RvEhJwcm90b2J1Zl91bml0dGVzdDMaFXVuaXR0ZXN0X3By\
            b3RvMy5wcm90byKZFgoHVGVzdE1hcBJWCg9tYXBfaW50MzJfaW50MzIYASADKAsyLi5wcm90b2J1Zl91\
            bml0dGVzdDMuVGVzdE1hcC5NYXBJbnQzMkludDMyRW50cnlSDW1hcEludDMySW50MzISVgoPbWFwX2lu\
            dDY0X2ludDY0GAIgAygLMi4ucHJvdG9idWZfdW5pdHRlc3QzLlRlc3RNYXAuTWFwSW50NjRJbnQ2NEVu\
            dHJ5Ug1tYXBJbnQ2NEludDY0ElwKEW1hcF91aW50MzJfdWludDMyGAMgAygLMjAucHJvdG9idWZfdW5p\
            dHRlc3QzLlRlc3RNYXAuTWFwVWludDMyVWludDMyRW50cnlSD21hcFVpbnQzMlVpbnQzMhJcChFtYXBf\
            dWludDY0X3VpbnQ2NBgEIAMoCzIwLnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0TWFwLk1hcFVpbnQ2NFVp\
            bnQ2NEVudHJ5Ug9tYXBVaW50NjRVaW50NjQSXAoRbWFwX3NpbnQzMl9zaW50MzIYBSADKAsyMC5wcm90\
            b2J1Zl91bml0dGVzdDMuVGVzdE1hcC5NYXBTaW50MzJTaW50MzJFbnRyeVIPbWFwU2ludDMyU2ludDMy\
            ElwKEW1hcF9zaW50NjRfc2ludDY0GAYgAygLMjAucHJvdG9idWZfdW5pdHRlc3QzLlRlc3RNYXAuTWFw\
            U2ludDY0U2ludDY0RW50cnlSD21hcFNpbnQ2NFNpbnQ2NBJiChNtYXBfZml4ZWQzMl9maXhlZDMyGAcg\
            AygLMjIucHJvdG9idWZfdW5pdHRlc3QzLlRlc3RNYXAuTWFwRml4ZWQzMkZpeGVkMzJFbnRyeVIRbWFw\
            Rml4ZWQzMkZpeGVkMzISYgoTbWFwX2ZpeGVkNjRfZml4ZWQ2NBgIIAMoCzIyLnByb3RvYnVmX3VuaXR0\
            ZXN0My5UZXN0TWFwLk1hcEZpeGVkNjRGaXhlZDY0RW50cnlSEW1hcEZpeGVkNjRGaXhlZDY0EmgKFW1h\
            cF9zZml4ZWQzMl9zZml4ZWQzMhgJIAMoCzI0LnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0TWFwLk1hcFNm\
            aXhlZDMyU2ZpeGVkMzJFbnRyeVITbWFwU2ZpeGVkMzJTZml4ZWQzMhJoChVtYXBfc2ZpeGVkNjRfc2Zp\
            eGVkNjQYCiADKAsyNC5wcm90b2J1Zl91bml0dGVzdDMuVGVzdE1hcC5NYXBTZml4ZWQ2NFNmaXhlZDY0\
            RW50cnlSE21hcFNmaXhlZDY0U2ZpeGVkNjQSVgoPbWFwX2ludDMyX2Zsb2F0GAsgAygLMi4ucHJvdG9i\
            dWZfdW5pdHRlc3QzLlRlc3RNYXAuTWFwSW50MzJGbG9hdEVudHJ5Ug1tYXBJbnQzMkZsb2F0ElkKEG1h\
            cF9pbnQzMl9kb3VibGUYDCADKAsyLy5wcm90b2J1Zl91bml0dGVzdDMuVGVzdE1hcC5NYXBJbnQzMkRv\
            dWJsZUVudHJ5Ug5tYXBJbnQzMkRvdWJsZRJQCg1tYXBfYm9vbF9ib29sGA0gAygLMiwucHJvdG9idWZf\
            dW5pdHRlc3QzLlRlc3RNYXAuTWFwQm9vbEJvb2xFbnRyeVILbWFwQm9vbEJvb2wSXAoRbWFwX3N0cmlu\
            Z19zdHJpbmcYDiADKAsyMC5wcm90b2J1Zl91bml0dGVzdDMuVGVzdE1hcC5NYXBTdHJpbmdTdHJpbmdF\
            bnRyeVIPbWFwU3RyaW5nU3RyaW5nElYKD21hcF9pbnQzMl9ieXRlcxgPIAMoCzIuLnByb3RvYnVmX3Vu\
            aXR0ZXN0My5UZXN0TWFwLk1hcEludDMyQnl0ZXNFbnRyeVINbWFwSW50MzJCeXRlcxJTCg5tYXBfaW50\
            MzJfZW51bRgQIAMoCzItLnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0TWFwLk1hcEludDMyRW51bUVudHJ5\
            UgxtYXBJbnQzMkVudW0ScgoZbWFwX2ludDMyX2ZvcmVpZ25fbWVzc2FnZRgRIAMoCzI3LnByb3RvYnVm\
            X3VuaXR0ZXN0My5UZXN0TWFwLk1hcEludDMyRm9yZWlnbk1lc3NhZ2VFbnRyeVIWbWFwSW50MzJGb3Jl\
            aWduTWVzc2FnZRpAChJNYXBJbnQzMkludDMyRW50cnkSEAoDa2V5GAEgASgFUgNrZXkSFAoFdmFsdWUY\
            AiABKAVSBXZhbHVlOgI4ARpAChJNYXBJbnQ2NEludDY0RW50cnkSEAoDa2V5GAEgASgDUgNrZXkSFAoF\
            dmFsdWUYAiABKANSBXZhbHVlOgI4ARpCChRNYXBVaW50MzJVaW50MzJFbnRyeRIQCgNrZXkYASABKA1S\
            A2tleRIUCgV2YWx1ZRgCIAEoDVIFdmFsdWU6AjgBGkIKFE1hcFVpbnQ2NFVpbnQ2NEVudHJ5EhAKA2tl\
            eRgBIAEoBFIDa2V5EhQKBXZhbHVlGAIgASgEUgV2YWx1ZToCOAEaQgoUTWFwU2ludDMyU2ludDMyRW50\
            cnkSEAoDa2V5GAEgASgRUgNrZXkSFAoFdmFsdWUYAiABKBFSBXZhbHVlOgI4ARpCChRNYXBTaW50NjRT\
            aW50NjRFbnRyeRIQCgNrZXkYASABKBJSA2tleRIUCgV2YWx1ZRgCIAEoElIFdmFsdWU6AjgBGkQKFk1h\
            cEZpeGVkMzJGaXhlZDMyRW50cnkSEAoDa2V5GAEgASgHUgNrZXkSFAoFdmFsdWUYAiABKAdSBXZhbHVl\
            OgI4ARpEChZNYXBGaXhlZDY0Rml4ZWQ2NEVudHJ5EhAKA2tleRgBIAEoBlIDa2V5EhQKBXZhbHVlGAIg\
            ASgGUgV2YWx1ZToCOAEaRgoYTWFwU2ZpeGVkMzJTZml4ZWQzMkVudHJ5EhAKA2tleRgBIAEoD1IDa2V5\
            EhQKBXZhbHVlGAIgASgPUgV2YWx1ZToCOAEaRgoYTWFwU2ZpeGVkNjRTZml4ZWQ2NEVudHJ5EhAKA2tl\
            eRgBIAEoEFIDa2V5EhQKBXZhbHVlGAIgASgQUgV2YWx1ZToCOAEaQAoSTWFwSW50MzJGbG9hdEVudHJ5\
            EhAKA2tleRgBIAEoBVIDa2V5EhQKBXZhbHVlGAIgASgCUgV2YWx1ZToCOAEaQQoTTWFwSW50MzJEb3Vi\
            bGVFbnRyeRIQCgNrZXkYASABKAVSA2tleRIUCgV2YWx1ZRgCIAEoAVIFdmFsdWU6AjgBGj4KEE1hcEJv\
            b2xCb29sRW50cnkSEAoDa2V5GAEgASgIUgNrZXkSFAoFdmFsdWUYAiABKAhSBXZhbHVlOgI4ARpCChRN\
            YXBTdHJpbmdTdHJpbmdFbnRyeRIQCgNrZXkYASABKAlSA2tleRIUCgV2YWx1ZRgCIAEoCVIFdmFsdWU6\
            AjgBGkAKEk1hcEludDMyQnl0ZXNFbnRyeRIQCgNrZXkYASABKAVSA2tleRIUCgV2YWx1ZRgCIAEoDFIF\
            dmFsdWU6AjgBGlwKEU1hcEludDMyRW51bUVudHJ5EhAKA2tleRgBIAEoBVIDa2V5EjEKBXZhbHVlGAIg\
            ASgOMhsucHJvdG9idWZfdW5pdHRlc3QzLk1hcEVudW1SBXZhbHVlOgI4ARptChtNYXBJbnQzMkZvcmVp\
            Z25NZXNzYWdlRW50cnkSEAoDa2V5GAEgASgFUgNrZXkSOAoFdmFsdWUYAiABKAsyIi5wcm90b2J1Zl91\
            bml0dGVzdDMuRm9yZWlnbk1lc3NhZ2VSBXZhbHVlOgI4ASJLChFUZXN0TWFwU3VibWVzc2FnZRI2Cgh0\
            ZXN0X21hcBgBIAEoCzIbLnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0TWFwUgd0ZXN0TWFwItsBCg5UZXN0\
            TWVzc2FnZU1hcBJjChFtYXBfaW50MzJfbWVzc2FnZRgBIAMoCzI3LnByb3RvYnVmX3VuaXR0ZXN0My5U\
            ZXN0TWVzc2FnZU1hcC5NYXBJbnQzMk1lc3NhZ2VFbnRyeVIPbWFwSW50MzJNZXNzYWdlGmQKFE1hcElu\
            dDMyTWVzc2FnZUVudHJ5EhAKA2tleRgBIAEoBVIDa2V5EjYKBXZhbHVlGAIgASgLMiAucHJvdG9idWZf\
            dW5pdHRlc3QzLlRlc3RBbGxUeXBlc1IFdmFsdWU6AjgBIokCCg9UZXN0U2FtZVR5cGVNYXASQQoEbWFw\
            MRgBIAMoCzItLnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0U2FtZVR5cGVNYXAuTWFwMUVudHJ5UgRtYXAx\
            EkEKBG1hcDIYAiADKAsyLS5wcm90b2J1Zl91bml0dGVzdDMuVGVzdFNhbWVUeXBlTWFwLk1hcDJFbnRy\
            eVIEbWFwMho3CglNYXAxRW50cnkSEAoDa2V5GAEgASgFUgNrZXkSFAoFdmFsdWUYAiABKAVSBXZhbHVl\
            OgI4ARo3CglNYXAyRW50cnkSEAoDa2V5GAEgASgFUgNrZXkSFAoFdmFsdWUYAiABKAVSBXZhbHVlOgI4\
            ASKtFAoMVGVzdEFyZW5hTWFwElsKD21hcF9pbnQzMl9pbnQzMhgBIAMoCzIzLnByb3RvYnVmX3VuaXR0\
            ZXN0My5UZXN0QXJlbmFNYXAuTWFwSW50MzJJbnQzMkVudHJ5Ug1tYXBJbnQzMkludDMyElsKD21hcF9p\
            bnQ2NF9pbnQ2NBgCIAMoCzIzLnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0QXJlbmFNYXAuTWFwSW50NjRJ\
            bnQ2NEVudHJ5Ug1tYXBJbnQ2NEludDY0EmEKEW1hcF91aW50MzJfdWludDMyGAMgAygLMjUucHJvdG9i\
            dWZfdW5pdHRlc3QzLlRlc3RBcmVuYU1hcC5NYXBVaW50MzJVaW50MzJFbnRyeVIPbWFwVWludDMyVWlu\
            dDMyEmEKEW1hcF91aW50NjRfdWludDY0GAQgAygLMjUucHJvdG9idWZfdW5pdHRlc3QzLlRlc3RBcmVu\
            YU1hcC5NYXBVaW50NjRVaW50NjRFbnRyeVIPbWFwVWludDY0VWludDY0EmEKEW1hcF9zaW50MzJfc2lu\
            dDMyGAUgAygLMjUucHJvdG9idWZfdW5pdHRlc3QzLlRlc3RBcmVuYU1hcC5NYXBTaW50MzJTaW50MzJF\
            bnRyeVIPbWFwU2ludDMyU2ludDMyEmEKEW1hcF9zaW50NjRfc2ludDY0GAYgAygLMjUucHJvdG9idWZf\
            dW5pdHRlc3QzLlRlc3RBcmVuYU1hcC5NYXBTaW50NjRTaW50NjRFbnRyeVIPbWFwU2ludDY0U2ludDY0\
            EmcKE21hcF9maXhlZDMyX2ZpeGVkMzIYByADKAsyNy5wcm90b2J1Zl91bml0dGVzdDMuVGVzdEFyZW5h\
            TWFwLk1hcEZpeGVkMzJGaXhlZDMyRW50cnlSEW1hcEZpeGVkMzJGaXhlZDMyEmcKE21hcF9maXhlZDY0\
            X2ZpeGVkNjQYCCADKAsyNy5wcm90b2J1Zl91bml0dGVzdDMuVGVzdEFyZW5hTWFwLk1hcEZpeGVkNjRG\
            aXhlZDY0RW50cnlSEW1hcEZpeGVkNjRGaXhlZDY0Em0KFW1hcF9zZml4ZWQzMl9zZml4ZWQzMhgJIAMo\
            CzI5LnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0QXJlbmFNYXAuTWFwU2ZpeGVkMzJTZml4ZWQzMkVudHJ5\
            UhNtYXBTZml4ZWQzMlNmaXhlZDMyEm0KFW1hcF9zZml4ZWQ2NF9zZml4ZWQ2NBgKIAMoCzI5LnByb3Rv\
            YnVmX3VuaXR0ZXN0My5UZXN0QXJlbmFNYXAuTWFwU2ZpeGVkNjRTZml4ZWQ2NEVudHJ5UhNtYXBTZml4\
            ZWQ2NFNmaXhlZDY0ElsKD21hcF9pbnQzMl9mbG9hdBgLIAMoCzIzLnByb3RvYnVmX3VuaXR0ZXN0My5U\
            ZXN0QXJlbmFNYXAuTWFwSW50MzJGbG9hdEVudHJ5Ug1tYXBJbnQzMkZsb2F0El4KEG1hcF9pbnQzMl9k\
            b3VibGUYDCADKAsyNC5wcm90b2J1Zl91bml0dGVzdDMuVGVzdEFyZW5hTWFwLk1hcEludDMyRG91Ymxl\
            RW50cnlSDm1hcEludDMyRG91YmxlElUKDW1hcF9ib29sX2Jvb2wYDSADKAsyMS5wcm90b2J1Zl91bml0\
            dGVzdDMuVGVzdEFyZW5hTWFwLk1hcEJvb2xCb29sRW50cnlSC21hcEJvb2xCb29sElgKDm1hcF9pbnQz\
            Ml9lbnVtGA4gAygLMjIucHJvdG9idWZfdW5pdHRlc3QzLlRlc3RBcmVuYU1hcC5NYXBJbnQzMkVudW1F\
            bnRyeVIMbWFwSW50MzJFbnVtEncKGW1hcF9pbnQzMl9mb3JlaWduX21lc3NhZ2UYDyADKAsyPC5wcm90\
            b2J1Zl91bml0dGVzdDMuVGVzdEFyZW5hTWFwLk1hcEludDMyRm9yZWlnbk1lc3NhZ2VFbnRyeVIWbWFw\
            SW50MzJGb3JlaWduTWVzc2FnZRpAChJNYXBJbnQzMkludDMyRW50cnkSEAoDa2V5GAEgASgFUgNrZXkS\
            FAoFdmFsdWUYAiABKAVSBXZhbHVlOgI4ARpAChJNYXBJbnQ2NEludDY0RW50cnkSEAoDa2V5GAEgASgD\
            UgNrZXkSFAoFdmFsdWUYAiABKANSBXZhbHVlOgI4ARpCChRNYXBVaW50MzJVaW50MzJFbnRyeRIQCgNr\
            ZXkYASABKA1SA2tleRIUCgV2YWx1ZRgCIAEoDVIFdmFsdWU6AjgBGkIKFE1hcFVpbnQ2NFVpbnQ2NEVu\
            dHJ5EhAKA2tleRgBIAEoBFIDa2V5EhQKBXZhbHVlGAIgASgEUgV2YWx1ZToCOAEaQgoUTWFwU2ludDMy\
            U2ludDMyRW50cnkSEAoDa2V5GAEgASgRUgNrZXkSFAoFdmFsdWUYAiABKBFSBXZhbHVlOgI4ARpCChRN\
            YXBTaW50NjRTaW50NjRFbnRyeRIQCgNrZXkYASABKBJSA2tleRIUCgV2YWx1ZRgCIAEoElIFdmFsdWU6\
            AjgBGkQKFk1hcEZpeGVkMzJGaXhlZDMyRW50cnkSEAoDa2V5GAEgASgHUgNrZXkSFAoFdmFsdWUYAiAB\
            KAdSBXZhbHVlOgI4ARpEChZNYXBGaXhlZDY0Rml4ZWQ2NEVudHJ5EhAKA2tleRgBIAEoBlIDa2V5EhQK\
            BXZhbHVlGAIgASgGUgV2YWx1ZToCOAEaRgoYTWFwU2ZpeGVkMzJTZml4ZWQzMkVudHJ5EhAKA2tleRgB\
            IAEoD1IDa2V5EhQKBXZhbHVlGAIgASgPUgV2YWx1ZToCOAEaRgoYTWFwU2ZpeGVkNjRTZml4ZWQ2NEVu\
            dHJ5EhAKA2tleRgBIAEoEFIDa2V5EhQKBXZhbHVlGAIgASgQUgV2YWx1ZToCOAEaQAoSTWFwSW50MzJG\
            bG9hdEVudHJ5EhAKA2tleRgBIAEoBVIDa2V5EhQKBXZhbHVlGAIgASgCUgV2YWx1ZToCOAEaQQoTTWFw\
            SW50MzJEb3VibGVFbnRyeRIQCgNrZXkYASABKAVSA2tleRIUCgV2YWx1ZRgCIAEoAVIFdmFsdWU6AjgB\
            Gj4KEE1hcEJvb2xCb29sRW50cnkSEAoDa2V5GAEgASgIUgNrZXkSFAoFdmFsdWUYAiABKAhSBXZhbHVl\
            OgI4ARpcChFNYXBJbnQzMkVudW1FbnRyeRIQCgNrZXkYASABKAVSA2tleRIxCgV2YWx1ZRgCIAEoDjIb\
            LnByb3RvYnVmX3VuaXR0ZXN0My5NYXBFbnVtUgV2YWx1ZToCOAEabQobTWFwSW50MzJGb3JlaWduTWVz\
            c2FnZUVudHJ5EhAKA2tleRgBIAEoBVIDa2V5EjgKBXZhbHVlGAIgASgLMiIucHJvdG9idWZfdW5pdHRl\
            c3QzLkZvcmVpZ25NZXNzYWdlUgV2YWx1ZToCOAEi+AEKH01lc3NhZ2VDb250YWluaW5nRW51bUNhbGxl\
            ZFR5cGUSUQoEdHlwZRgBIAMoCzI9LnByb3RvYnVmX3VuaXR0ZXN0My5NZXNzYWdlQ29udGFpbmluZ0Vu\
            dW1DYWxsZWRUeXBlLlR5cGVFbnRyeVIEdHlwZRpsCglUeXBlRW50cnkSEAoDa2V5GAEgASgFUgNrZXkS\
            SQoFdmFsdWUYAiABKAsyMy5wcm90b2J1Zl91bml0dGVzdDMuTWVzc2FnZUNvbnRhaW5pbmdFbnVtQ2Fs\
            bGVkVHlwZVIFdmFsdWU6AjgBIhQKBFR5cGUSDAoIVFlQRV9GT08QACKxAQofTWVzc2FnZUNvbnRhaW5p\
            bmdNYXBDYWxsZWRFbnRyeRJUCgVlbnRyeRgBIAMoCzI+LnByb3RvYnVmX3VuaXR0ZXN0My5NZXNzYWdl\
            Q29udGFpbmluZ01hcENhbGxlZEVudHJ5LkVudHJ5RW50cnlSBWVudHJ5GjgKCkVudHJ5RW50cnkSEAoD\
            a2V5GAEgASgFUgNrZXkSFAoFdmFsdWUYAiABKAVSBXZhbHVlOgI4ASo/CgdNYXBFbnVtEhAKDE1BUF9F\
            TlVNX0ZPTxAAEhAKDE1BUF9FTlVNX0JBUhABEhAKDE1BUF9FTlVNX0JBWhACQi2qAipGU2hhcnAuR3Jw\
            Y0NvZGVHZW5lcmF0b3IuVGVzdFByb3Rvcy5GU2hhcnBiBnByb3RvMw==")
        global.System.Lazy<_>(
            (fun () ->
                global.Google.Protobuf.Reflection.FileDescriptor.FromGeneratedCode(
                    descriptorData,
                    [|
                        global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.UnittestProto3Reflection.Descriptor()
                    |],
                    new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(
                        [|
                            typeof<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MapEnum>
                        |],
                        null,
                        [|
                            new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(typeof<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestMap>, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestMap.Parser, [| "MapInt32Int32"; "MapInt64Int64"; "MapUint32Uint32"; "MapUint64Uint64"; "MapSint32Sint32"; "MapSint64Sint64"; "MapFixed32Fixed32"; "MapFixed64Fixed64"; "MapSfixed32Sfixed32"; "MapSfixed64Sfixed64"; "MapInt32Float"; "MapInt32Double"; "MapBoolBool"; "MapStringString"; "MapInt32Bytes"; "MapInt32Enum"; "MapInt32ForeignMessage" |], null, null, null, [| null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null |])
                            new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(typeof<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestMapSubmessage>, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestMapSubmessage.Parser, [| "TestMap" |], null, null, null, null)
                            new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(typeof<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestMessageMap>, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestMessageMap.Parser, [| "MapInt32Message" |], null, null, null, [| null |])
                            new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(typeof<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestSameTypeMap>, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestSameTypeMap.Parser, [| "Map1"; "Map2" |], null, null, null, [| null; null |])
                            new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(typeof<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestArenaMap>, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestArenaMap.Parser, [| "MapInt32Int32"; "MapInt64Int64"; "MapUint32Uint32"; "MapUint64Uint64"; "MapSint32Sint32"; "MapSint64Sint64"; "MapFixed32Fixed32"; "MapFixed64Fixed64"; "MapSfixed32Sfixed32"; "MapSfixed64Sfixed64"; "MapInt32Float"; "MapInt32Double"; "MapBoolBool"; "MapInt32Enum"; "MapInt32ForeignMessage" |], null, null, null, [| null; null; null; null; null; null; null; null; null; null; null; null; null; null; null |])
                            new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(typeof<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MessageContainingEnumCalledType>, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MessageContainingEnumCalledType.Parser, [| "Type" |], null, [| typeof<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MessageContainingEnumCalledType.Types.Type> |], null, [| null |])
                            new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(typeof<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MessageContainingMapCalledEntry>, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MessageContainingMapCalledEntry.Parser, [| "Entry" |], null, null, null, [| null |])
                        |]
                    )
                )
            ),
            true
        )
    let Descriptor(): global.Google.Protobuf.Reflection.FileDescriptor = descriptorBackingField.Value
type MapEnum =
| [<global.Google.Protobuf.Reflection.OriginalName("MAP_ENUM_FOO")>] Foo = 0
| [<global.Google.Protobuf.Reflection.OriginalName("MAP_ENUM_BAR")>] Bar = 1
| [<global.Google.Protobuf.Reflection.OriginalName("MAP_ENUM_BAZ")>] Baz = 2
type TestMap = {
    mutable _UnknownFields: global.Google.Protobuf.UnknownFieldSet
    MapInt32Int32: global.Google.Protobuf.Collections.MapField<int32, int32>
    MapInt64Int64: global.Google.Protobuf.Collections.MapField<int64, int64>
    MapUint32Uint32: global.Google.Protobuf.Collections.MapField<uint32, uint32>
    MapUint64Uint64: global.Google.Protobuf.Collections.MapField<uint64, uint64>
    MapSint32Sint32: global.Google.Protobuf.Collections.MapField<int32, int32>
    MapSint64Sint64: global.Google.Protobuf.Collections.MapField<int64, int64>
    MapFixed32Fixed32: global.Google.Protobuf.Collections.MapField<uint32, uint32>
    MapFixed64Fixed64: global.Google.Protobuf.Collections.MapField<uint64, uint64>
    MapSfixed32Sfixed32: global.Google.Protobuf.Collections.MapField<int32, int32>
    MapSfixed64Sfixed64: global.Google.Protobuf.Collections.MapField<int64, int64>
    MapInt32Float: global.Google.Protobuf.Collections.MapField<int32, float32>
    MapInt32Double: global.Google.Protobuf.Collections.MapField<int32, float>
    MapBoolBool: global.Google.Protobuf.Collections.MapField<bool, bool>
    MapStringString: global.Google.Protobuf.Collections.MapField<string, string>
    MapInt32Bytes: global.Google.Protobuf.Collections.MapField<int32, global.Google.Protobuf.ByteString>
    MapInt32Enum: global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MapEnum>
    MapInt32ForeignMessage: global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.ForeignMessage>
} with
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.Clone() : TestMap = {
        TestMap._UnknownFields = global.Google.Protobuf.UnknownFieldSet.Clone(me._UnknownFields)
        TestMap.MapInt32Int32 = me.MapInt32Int32.Clone()
        TestMap.MapInt64Int64 = me.MapInt64Int64.Clone()
        TestMap.MapUint32Uint32 = me.MapUint32Uint32.Clone()
        TestMap.MapUint64Uint64 = me.MapUint64Uint64.Clone()
        TestMap.MapSint32Sint32 = me.MapSint32Sint32.Clone()
        TestMap.MapSint64Sint64 = me.MapSint64Sint64.Clone()
        TestMap.MapFixed32Fixed32 = me.MapFixed32Fixed32.Clone()
        TestMap.MapFixed64Fixed64 = me.MapFixed64Fixed64.Clone()
        TestMap.MapSfixed32Sfixed32 = me.MapSfixed32Sfixed32.Clone()
        TestMap.MapSfixed64Sfixed64 = me.MapSfixed64Sfixed64.Clone()
        TestMap.MapInt32Float = me.MapInt32Float.Clone()
        TestMap.MapInt32Double = me.MapInt32Double.Clone()
        TestMap.MapBoolBool = me.MapBoolBool.Clone()
        TestMap.MapStringString = me.MapStringString.Clone()
        TestMap.MapInt32Bytes = me.MapInt32Bytes.Clone()
        TestMap.MapInt32Enum = me.MapInt32Enum.Clone()
        TestMap.MapInt32ForeignMessage = me.MapInt32ForeignMessage.Clone()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalWriteTo(output: byref<global.Google.Protobuf.WriteContext>) =
        me.MapInt32Int32.WriteTo(&output, TestMap.MapMapInt32Int32Codec)
        me.MapInt64Int64.WriteTo(&output, TestMap.MapMapInt64Int64Codec)
        me.MapUint32Uint32.WriteTo(&output, TestMap.MapMapUint32Uint32Codec)
        me.MapUint64Uint64.WriteTo(&output, TestMap.MapMapUint64Uint64Codec)
        me.MapSint32Sint32.WriteTo(&output, TestMap.MapMapSint32Sint32Codec)
        me.MapSint64Sint64.WriteTo(&output, TestMap.MapMapSint64Sint64Codec)
        me.MapFixed32Fixed32.WriteTo(&output, TestMap.MapMapFixed32Fixed32Codec)
        me.MapFixed64Fixed64.WriteTo(&output, TestMap.MapMapFixed64Fixed64Codec)
        me.MapSfixed32Sfixed32.WriteTo(&output, TestMap.MapMapSfixed32Sfixed32Codec)
        me.MapSfixed64Sfixed64.WriteTo(&output, TestMap.MapMapSfixed64Sfixed64Codec)
        me.MapInt32Float.WriteTo(&output, TestMap.MapMapInt32FloatCodec)
        me.MapInt32Double.WriteTo(&output, TestMap.MapMapInt32DoubleCodec)
        me.MapBoolBool.WriteTo(&output, TestMap.MapMapBoolBoolCodec)
        me.MapStringString.WriteTo(&output, TestMap.MapMapStringStringCodec)
        me.MapInt32Bytes.WriteTo(&output, TestMap.MapMapInt32BytesCodec)
        me.MapInt32Enum.WriteTo(&output, TestMap.MapMapInt32EnumCodec)
        me.MapInt32ForeignMessage.WriteTo(&output, TestMap.MapMapInt32ForeignMessageCodec)
        if not <| isNull me._UnknownFields then me._UnknownFields.WriteTo(&output)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.CalculateSize() =
        let mutable size = 0
        size <- size + me.MapInt32Int32.CalculateSize(TestMap.MapMapInt32Int32Codec)
        size <- size + me.MapInt64Int64.CalculateSize(TestMap.MapMapInt64Int64Codec)
        size <- size + me.MapUint32Uint32.CalculateSize(TestMap.MapMapUint32Uint32Codec)
        size <- size + me.MapUint64Uint64.CalculateSize(TestMap.MapMapUint64Uint64Codec)
        size <- size + me.MapSint32Sint32.CalculateSize(TestMap.MapMapSint32Sint32Codec)
        size <- size + me.MapSint64Sint64.CalculateSize(TestMap.MapMapSint64Sint64Codec)
        size <- size + me.MapFixed32Fixed32.CalculateSize(TestMap.MapMapFixed32Fixed32Codec)
        size <- size + me.MapFixed64Fixed64.CalculateSize(TestMap.MapMapFixed64Fixed64Codec)
        size <- size + me.MapSfixed32Sfixed32.CalculateSize(TestMap.MapMapSfixed32Sfixed32Codec)
        size <- size + me.MapSfixed64Sfixed64.CalculateSize(TestMap.MapMapSfixed64Sfixed64Codec)
        size <- size + me.MapInt32Float.CalculateSize(TestMap.MapMapInt32FloatCodec)
        size <- size + me.MapInt32Double.CalculateSize(TestMap.MapMapInt32DoubleCodec)
        size <- size + me.MapBoolBool.CalculateSize(TestMap.MapMapBoolBoolCodec)
        size <- size + me.MapStringString.CalculateSize(TestMap.MapMapStringStringCodec)
        size <- size + me.MapInt32Bytes.CalculateSize(TestMap.MapMapInt32BytesCodec)
        size <- size + me.MapInt32Enum.CalculateSize(TestMap.MapMapInt32EnumCodec)
        size <- size + me.MapInt32ForeignMessage.CalculateSize(TestMap.MapMapInt32ForeignMessageCodec)
        if not <| isNull me._UnknownFields then size <- size + me._UnknownFields.CalculateSize()
        size
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.MergeFrom(other: TestMap) =
        me.MapInt32Int32.Add(other.MapInt32Int32)
        me.MapInt64Int64.Add(other.MapInt64Int64)
        me.MapUint32Uint32.Add(other.MapUint32Uint32)
        me.MapUint64Uint64.Add(other.MapUint64Uint64)
        me.MapSint32Sint32.Add(other.MapSint32Sint32)
        me.MapSint64Sint64.Add(other.MapSint64Sint64)
        me.MapFixed32Fixed32.Add(other.MapFixed32Fixed32)
        me.MapFixed64Fixed64.Add(other.MapFixed64Fixed64)
        me.MapSfixed32Sfixed32.Add(other.MapSfixed32Sfixed32)
        me.MapSfixed64Sfixed64.Add(other.MapSfixed64Sfixed64)
        me.MapInt32Float.Add(other.MapInt32Float)
        me.MapInt32Double.Add(other.MapInt32Double)
        me.MapBoolBool.Add(other.MapBoolBool)
        me.MapStringString.Add(other.MapStringString)
        me.MapInt32Bytes.Add(other.MapInt32Bytes)
        me.MapInt32Enum.Add(other.MapInt32Enum)
        me.MapInt32ForeignMessage.Add(other.MapInt32ForeignMessage)
        me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFrom(me._UnknownFields, other._UnknownFields)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalMergeFrom(input: byref<global.Google.Protobuf.ParseContext>) =
        let mutable tag = input.ReadTag()
        while tag <> 0u do
            match tag with
            | 10u ->
                me.MapInt32Int32.AddEntriesFrom(&input, TestMap.MapMapInt32Int32Codec)
            | 18u ->
                me.MapInt64Int64.AddEntriesFrom(&input, TestMap.MapMapInt64Int64Codec)
            | 26u ->
                me.MapUint32Uint32.AddEntriesFrom(&input, TestMap.MapMapUint32Uint32Codec)
            | 34u ->
                me.MapUint64Uint64.AddEntriesFrom(&input, TestMap.MapMapUint64Uint64Codec)
            | 42u ->
                me.MapSint32Sint32.AddEntriesFrom(&input, TestMap.MapMapSint32Sint32Codec)
            | 50u ->
                me.MapSint64Sint64.AddEntriesFrom(&input, TestMap.MapMapSint64Sint64Codec)
            | 58u ->
                me.MapFixed32Fixed32.AddEntriesFrom(&input, TestMap.MapMapFixed32Fixed32Codec)
            | 66u ->
                me.MapFixed64Fixed64.AddEntriesFrom(&input, TestMap.MapMapFixed64Fixed64Codec)
            | 74u ->
                me.MapSfixed32Sfixed32.AddEntriesFrom(&input, TestMap.MapMapSfixed32Sfixed32Codec)
            | 82u ->
                me.MapSfixed64Sfixed64.AddEntriesFrom(&input, TestMap.MapMapSfixed64Sfixed64Codec)
            | 90u ->
                me.MapInt32Float.AddEntriesFrom(&input, TestMap.MapMapInt32FloatCodec)
            | 98u ->
                me.MapInt32Double.AddEntriesFrom(&input, TestMap.MapMapInt32DoubleCodec)
            | 106u ->
                me.MapBoolBool.AddEntriesFrom(&input, TestMap.MapMapBoolBoolCodec)
            | 114u ->
                me.MapStringString.AddEntriesFrom(&input, TestMap.MapMapStringStringCodec)
            | 122u ->
                me.MapInt32Bytes.AddEntriesFrom(&input, TestMap.MapMapInt32BytesCodec)
            | 130u ->
                me.MapInt32Enum.AddEntriesFrom(&input, TestMap.MapMapInt32EnumCodec)
            | 138u ->
                me.MapInt32ForeignMessage.AddEntriesFrom(&input, TestMap.MapMapInt32ForeignMessageCodec)
            | _ ->
                me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFieldFrom(me._UnknownFields, &input)
            tag <- input.ReadTag()
    interface global.Google.Protobuf.IBufferMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalMergeFrom(ctx) = me.InternalMergeFrom(&ctx)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalWriteTo(ctx) = me.InternalWriteTo(&ctx)
    interface global.Google.Protobuf.IMessage<TestMap> with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.Clone() = me.Clone()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(other) = me.MergeFrom(other)
    interface global.Google.Protobuf.IMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.CalculateSize() = me.CalculateSize()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(input) = input.ReadRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.WriteTo(output) = output.WriteRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member __.Descriptor = global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MapUnittestProto3Reflection.TestMap_Descriptor()
module TestMap =
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal DefaultValue = {
        TestMap._UnknownFields = null
        TestMap.MapInt32Int32 = global.Google.Protobuf.Collections.MapField<int32, int32>()
        TestMap.MapInt64Int64 = global.Google.Protobuf.Collections.MapField<int64, int64>()
        TestMap.MapUint32Uint32 = global.Google.Protobuf.Collections.MapField<uint32, uint32>()
        TestMap.MapUint64Uint64 = global.Google.Protobuf.Collections.MapField<uint64, uint64>()
        TestMap.MapSint32Sint32 = global.Google.Protobuf.Collections.MapField<int32, int32>()
        TestMap.MapSint64Sint64 = global.Google.Protobuf.Collections.MapField<int64, int64>()
        TestMap.MapFixed32Fixed32 = global.Google.Protobuf.Collections.MapField<uint32, uint32>()
        TestMap.MapFixed64Fixed64 = global.Google.Protobuf.Collections.MapField<uint64, uint64>()
        TestMap.MapSfixed32Sfixed32 = global.Google.Protobuf.Collections.MapField<int32, int32>()
        TestMap.MapSfixed64Sfixed64 = global.Google.Protobuf.Collections.MapField<int64, int64>()
        TestMap.MapInt32Float = global.Google.Protobuf.Collections.MapField<int32, float32>()
        TestMap.MapInt32Double = global.Google.Protobuf.Collections.MapField<int32, float>()
        TestMap.MapBoolBool = global.Google.Protobuf.Collections.MapField<bool, bool>()
        TestMap.MapStringString = global.Google.Protobuf.Collections.MapField<string, string>()
        TestMap.MapInt32Bytes = global.Google.Protobuf.Collections.MapField<int32, global.Google.Protobuf.ByteString>()
        TestMap.MapInt32Enum = global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MapEnum>()
        TestMap.MapInt32ForeignMessage = global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.ForeignMessage>()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let empty () = {
        TestMap._UnknownFields = null
        TestMap.MapInt32Int32 = global.Google.Protobuf.Collections.MapField<int32, int32>()
        TestMap.MapInt64Int64 = global.Google.Protobuf.Collections.MapField<int64, int64>()
        TestMap.MapUint32Uint32 = global.Google.Protobuf.Collections.MapField<uint32, uint32>()
        TestMap.MapUint64Uint64 = global.Google.Protobuf.Collections.MapField<uint64, uint64>()
        TestMap.MapSint32Sint32 = global.Google.Protobuf.Collections.MapField<int32, int32>()
        TestMap.MapSint64Sint64 = global.Google.Protobuf.Collections.MapField<int64, int64>()
        TestMap.MapFixed32Fixed32 = global.Google.Protobuf.Collections.MapField<uint32, uint32>()
        TestMap.MapFixed64Fixed64 = global.Google.Protobuf.Collections.MapField<uint64, uint64>()
        TestMap.MapSfixed32Sfixed32 = global.Google.Protobuf.Collections.MapField<int32, int32>()
        TestMap.MapSfixed64Sfixed64 = global.Google.Protobuf.Collections.MapField<int64, int64>()
        TestMap.MapInt32Float = global.Google.Protobuf.Collections.MapField<int32, float32>()
        TestMap.MapInt32Double = global.Google.Protobuf.Collections.MapField<int32, float>()
        TestMap.MapBoolBool = global.Google.Protobuf.Collections.MapField<bool, bool>()
        TestMap.MapStringString = global.Google.Protobuf.Collections.MapField<string, string>()
        TestMap.MapInt32Bytes = global.Google.Protobuf.Collections.MapField<int32, global.Google.Protobuf.ByteString>()
        TestMap.MapInt32Enum = global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MapEnum>()
        TestMap.MapInt32ForeignMessage = global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.ForeignMessage>()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let Parser = global.Google.Protobuf.MessageParser<TestMap>(global.System.Func<_>(empty))
    let MapInt32Int32FieldNumber = 1
    let MapInt64Int64FieldNumber = 2
    let MapUint32Uint32FieldNumber = 3
    let MapUint64Uint64FieldNumber = 4
    let MapSint32Sint32FieldNumber = 5
    let MapSint64Sint64FieldNumber = 6
    let MapFixed32Fixed32FieldNumber = 7
    let MapFixed64Fixed64FieldNumber = 8
    let MapSfixed32Sfixed32FieldNumber = 9
    let MapSfixed64Sfixed64FieldNumber = 10
    let MapInt32FloatFieldNumber = 11
    let MapInt32DoubleFieldNumber = 12
    let MapBoolBoolFieldNumber = 13
    let MapStringStringFieldNumber = 14
    let MapInt32BytesFieldNumber = 15
    let MapInt32EnumFieldNumber = 16
    let MapInt32ForeignMessageFieldNumber = 17
    let MapMapInt32Int32Codec = global.Google.Protobuf.Collections.MapField<int32, int32>.Codec(global.Google.Protobuf.FieldCodec.ForInt32(8u, 0), global.Google.Protobuf.FieldCodec.ForInt32(16u, 0), 10u)
    let MapMapInt64Int64Codec = global.Google.Protobuf.Collections.MapField<int64, int64>.Codec(global.Google.Protobuf.FieldCodec.ForInt64(8u, 0L), global.Google.Protobuf.FieldCodec.ForInt64(16u, 0L), 18u)
    let MapMapUint32Uint32Codec = global.Google.Protobuf.Collections.MapField<uint32, uint32>.Codec(global.Google.Protobuf.FieldCodec.ForUInt32(8u, 0u), global.Google.Protobuf.FieldCodec.ForUInt32(16u, 0u), 26u)
    let MapMapUint64Uint64Codec = global.Google.Protobuf.Collections.MapField<uint64, uint64>.Codec(global.Google.Protobuf.FieldCodec.ForUInt64(8u, 0UL), global.Google.Protobuf.FieldCodec.ForUInt64(16u, 0UL), 34u)
    let MapMapSint32Sint32Codec = global.Google.Protobuf.Collections.MapField<int32, int32>.Codec(global.Google.Protobuf.FieldCodec.ForSInt32(8u, 0), global.Google.Protobuf.FieldCodec.ForSInt32(16u, 0), 42u)
    let MapMapSint64Sint64Codec = global.Google.Protobuf.Collections.MapField<int64, int64>.Codec(global.Google.Protobuf.FieldCodec.ForSInt64(8u, 0L), global.Google.Protobuf.FieldCodec.ForSInt64(16u, 0L), 50u)
    let MapMapFixed32Fixed32Codec = global.Google.Protobuf.Collections.MapField<uint32, uint32>.Codec(global.Google.Protobuf.FieldCodec.ForFixed32(13u, 0u), global.Google.Protobuf.FieldCodec.ForFixed32(21u, 0u), 58u)
    let MapMapFixed64Fixed64Codec = global.Google.Protobuf.Collections.MapField<uint64, uint64>.Codec(global.Google.Protobuf.FieldCodec.ForFixed64(9u, 0UL), global.Google.Protobuf.FieldCodec.ForFixed64(17u, 0UL), 66u)
    let MapMapSfixed32Sfixed32Codec = global.Google.Protobuf.Collections.MapField<int32, int32>.Codec(global.Google.Protobuf.FieldCodec.ForSFixed32(13u, 0), global.Google.Protobuf.FieldCodec.ForSFixed32(21u, 0), 74u)
    let MapMapSfixed64Sfixed64Codec = global.Google.Protobuf.Collections.MapField<int64, int64>.Codec(global.Google.Protobuf.FieldCodec.ForSFixed64(9u, 0L), global.Google.Protobuf.FieldCodec.ForSFixed64(17u, 0L), 82u)
    let MapMapInt32FloatCodec = global.Google.Protobuf.Collections.MapField<int32, float32>.Codec(global.Google.Protobuf.FieldCodec.ForInt32(8u, 0), global.Google.Protobuf.FieldCodec.ForFloat(21u, 0f), 90u)
    let MapMapInt32DoubleCodec = global.Google.Protobuf.Collections.MapField<int32, float>.Codec(global.Google.Protobuf.FieldCodec.ForInt32(8u, 0), global.Google.Protobuf.FieldCodec.ForDouble(17u, 0.0), 98u)
    let MapMapBoolBoolCodec = global.Google.Protobuf.Collections.MapField<bool, bool>.Codec(global.Google.Protobuf.FieldCodec.ForBool(8u, false), global.Google.Protobuf.FieldCodec.ForBool(16u, false), 106u)
    let MapMapStringStringCodec = global.Google.Protobuf.Collections.MapField<string, string>.Codec(global.Google.Protobuf.FieldCodec.ForString(10u, ""), global.Google.Protobuf.FieldCodec.ForString(18u, ""), 114u)
    let MapMapInt32BytesCodec = global.Google.Protobuf.Collections.MapField<int32, global.Google.Protobuf.ByteString>.Codec(global.Google.Protobuf.FieldCodec.ForInt32(8u, 0), global.Google.Protobuf.FieldCodec.ForBytes(18u, global.Google.Protobuf.ByteString.Empty), 122u)
    let MapMapInt32EnumCodec = global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MapEnum>.Codec(global.Google.Protobuf.FieldCodec.ForInt32(8u, 0), global.Google.Protobuf.FieldCodec.ForEnum(16u, global.System.Func<_,_>(fun x -> int x), global.System.Func<_,_>(fun x -> enum x), global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MapEnum.Foo), 130u)
    let MapMapInt32ForeignMessageCodec = global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.ForeignMessage>.Codec(global.Google.Protobuf.FieldCodec.ForInt32(8u, 0), global.Google.Protobuf.FieldCodec.ForMessage(18u, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.ForeignMessage.Parser), 138u)
type TestMapSubmessage = {
    mutable _UnknownFields: global.Google.Protobuf.UnknownFieldSet
    mutable TestMap: ValueOption<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestMap>
} with
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.Clone() : TestMapSubmessage = {
        TestMapSubmessage._UnknownFields = global.Google.Protobuf.UnknownFieldSet.Clone(me._UnknownFields)
        TestMapSubmessage.TestMap = me.TestMap |> global.Microsoft.FSharp.Core.ValueOption.map (fun x -> (x :> global.Google.Protobuf.IMessage<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestMap>).Clone())
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalWriteTo(output: byref<global.Google.Protobuf.WriteContext>) =
        if me.TestMap <> ValueNone
        then
            output.WriteRawTag(10uy)
            output.WriteMessage(me.TestMap.Value)
        if not <| isNull me._UnknownFields then me._UnknownFields.WriteTo(&output)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.CalculateSize() =
        let mutable size = 0
        if me.TestMap <> ValueNone then size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeMessageSize(me.TestMap.Value)
        if not <| isNull me._UnknownFields then size <- size + me._UnknownFields.CalculateSize()
        size
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.MergeFrom(other: TestMapSubmessage) =
        if other.TestMap <> ValueNone
        then
            if me.TestMap.IsNone
            then me.TestMap <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestMap.empty())
            (me.TestMap.Value :> global.Google.Protobuf.IMessage<global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestMap>).MergeFrom(other.TestMap.Value)
        me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFrom(me._UnknownFields, other._UnknownFields)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalMergeFrom(input: byref<global.Google.Protobuf.ParseContext>) =
        let mutable tag = input.ReadTag()
        while tag <> 0u do
            match tag with
            | 10u ->
                if me.TestMap.IsNone
                then me.TestMap <- ValueSome(global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestMap.empty())
                input.ReadMessage(me.TestMap.Value)
            | _ ->
                me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFieldFrom(me._UnknownFields, &input)
            tag <- input.ReadTag()
    interface global.Google.Protobuf.IBufferMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalMergeFrom(ctx) = me.InternalMergeFrom(&ctx)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalWriteTo(ctx) = me.InternalWriteTo(&ctx)
    interface global.Google.Protobuf.IMessage<TestMapSubmessage> with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.Clone() = me.Clone()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(other) = me.MergeFrom(other)
    interface global.Google.Protobuf.IMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.CalculateSize() = me.CalculateSize()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(input) = input.ReadRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.WriteTo(output) = output.WriteRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member __.Descriptor = global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MapUnittestProto3Reflection.TestMapSubmessage_Descriptor()
module TestMapSubmessage =
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal DefaultValue = {
        TestMapSubmessage._UnknownFields = null
        TestMapSubmessage.TestMap = ValueNone
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let empty () = {
        TestMapSubmessage._UnknownFields = null
        TestMapSubmessage.TestMap = ValueNone
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let Parser = global.Google.Protobuf.MessageParser<TestMapSubmessage>(global.System.Func<_>(empty))
    let TestMapFieldNumber = 1
type TestMessageMap = {
    mutable _UnknownFields: global.Google.Protobuf.UnknownFieldSet
    MapInt32Message: global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestAllTypes>
} with
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.Clone() : TestMessageMap = {
        TestMessageMap._UnknownFields = global.Google.Protobuf.UnknownFieldSet.Clone(me._UnknownFields)
        TestMessageMap.MapInt32Message = me.MapInt32Message.Clone()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalWriteTo(output: byref<global.Google.Protobuf.WriteContext>) =
        me.MapInt32Message.WriteTo(&output, TestMessageMap.MapMapInt32MessageCodec)
        if not <| isNull me._UnknownFields then me._UnknownFields.WriteTo(&output)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.CalculateSize() =
        let mutable size = 0
        size <- size + me.MapInt32Message.CalculateSize(TestMessageMap.MapMapInt32MessageCodec)
        if not <| isNull me._UnknownFields then size <- size + me._UnknownFields.CalculateSize()
        size
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.MergeFrom(other: TestMessageMap) =
        me.MapInt32Message.Add(other.MapInt32Message)
        me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFrom(me._UnknownFields, other._UnknownFields)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalMergeFrom(input: byref<global.Google.Protobuf.ParseContext>) =
        let mutable tag = input.ReadTag()
        while tag <> 0u do
            match tag with
            | 10u ->
                me.MapInt32Message.AddEntriesFrom(&input, TestMessageMap.MapMapInt32MessageCodec)
            | _ ->
                me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFieldFrom(me._UnknownFields, &input)
            tag <- input.ReadTag()
    interface global.Google.Protobuf.IBufferMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalMergeFrom(ctx) = me.InternalMergeFrom(&ctx)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalWriteTo(ctx) = me.InternalWriteTo(&ctx)
    interface global.Google.Protobuf.IMessage<TestMessageMap> with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.Clone() = me.Clone()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(other) = me.MergeFrom(other)
    interface global.Google.Protobuf.IMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.CalculateSize() = me.CalculateSize()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(input) = input.ReadRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.WriteTo(output) = output.WriteRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member __.Descriptor = global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MapUnittestProto3Reflection.TestMessageMap_Descriptor()
module TestMessageMap =
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal DefaultValue = {
        TestMessageMap._UnknownFields = null
        TestMessageMap.MapInt32Message = global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestAllTypes>()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let empty () = {
        TestMessageMap._UnknownFields = null
        TestMessageMap.MapInt32Message = global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestAllTypes>()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let Parser = global.Google.Protobuf.MessageParser<TestMessageMap>(global.System.Func<_>(empty))
    let MapInt32MessageFieldNumber = 1
    let MapMapInt32MessageCodec = global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestAllTypes>.Codec(global.Google.Protobuf.FieldCodec.ForInt32(8u, 0), global.Google.Protobuf.FieldCodec.ForMessage(18u, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.TestAllTypes.Parser), 10u)
type TestSameTypeMap = {
    mutable _UnknownFields: global.Google.Protobuf.UnknownFieldSet
    Map1: global.Google.Protobuf.Collections.MapField<int32, int32>
    Map2: global.Google.Protobuf.Collections.MapField<int32, int32>
} with
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.Clone() : TestSameTypeMap = {
        TestSameTypeMap._UnknownFields = global.Google.Protobuf.UnknownFieldSet.Clone(me._UnknownFields)
        TestSameTypeMap.Map1 = me.Map1.Clone()
        TestSameTypeMap.Map2 = me.Map2.Clone()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalWriteTo(output: byref<global.Google.Protobuf.WriteContext>) =
        me.Map1.WriteTo(&output, TestSameTypeMap.MapMap1Codec)
        me.Map2.WriteTo(&output, TestSameTypeMap.MapMap2Codec)
        if not <| isNull me._UnknownFields then me._UnknownFields.WriteTo(&output)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.CalculateSize() =
        let mutable size = 0
        size <- size + me.Map1.CalculateSize(TestSameTypeMap.MapMap1Codec)
        size <- size + me.Map2.CalculateSize(TestSameTypeMap.MapMap2Codec)
        if not <| isNull me._UnknownFields then size <- size + me._UnknownFields.CalculateSize()
        size
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.MergeFrom(other: TestSameTypeMap) =
        me.Map1.Add(other.Map1)
        me.Map2.Add(other.Map2)
        me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFrom(me._UnknownFields, other._UnknownFields)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalMergeFrom(input: byref<global.Google.Protobuf.ParseContext>) =
        let mutable tag = input.ReadTag()
        while tag <> 0u do
            match tag with
            | 10u ->
                me.Map1.AddEntriesFrom(&input, TestSameTypeMap.MapMap1Codec)
            | 18u ->
                me.Map2.AddEntriesFrom(&input, TestSameTypeMap.MapMap2Codec)
            | _ ->
                me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFieldFrom(me._UnknownFields, &input)
            tag <- input.ReadTag()
    interface global.Google.Protobuf.IBufferMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalMergeFrom(ctx) = me.InternalMergeFrom(&ctx)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalWriteTo(ctx) = me.InternalWriteTo(&ctx)
    interface global.Google.Protobuf.IMessage<TestSameTypeMap> with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.Clone() = me.Clone()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(other) = me.MergeFrom(other)
    interface global.Google.Protobuf.IMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.CalculateSize() = me.CalculateSize()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(input) = input.ReadRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.WriteTo(output) = output.WriteRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member __.Descriptor = global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MapUnittestProto3Reflection.TestSameTypeMap_Descriptor()
module TestSameTypeMap =
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal DefaultValue = {
        TestSameTypeMap._UnknownFields = null
        TestSameTypeMap.Map1 = global.Google.Protobuf.Collections.MapField<int32, int32>()
        TestSameTypeMap.Map2 = global.Google.Protobuf.Collections.MapField<int32, int32>()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let empty () = {
        TestSameTypeMap._UnknownFields = null
        TestSameTypeMap.Map1 = global.Google.Protobuf.Collections.MapField<int32, int32>()
        TestSameTypeMap.Map2 = global.Google.Protobuf.Collections.MapField<int32, int32>()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let Parser = global.Google.Protobuf.MessageParser<TestSameTypeMap>(global.System.Func<_>(empty))
    let Map1FieldNumber = 1
    let Map2FieldNumber = 2
    let MapMap1Codec = global.Google.Protobuf.Collections.MapField<int32, int32>.Codec(global.Google.Protobuf.FieldCodec.ForInt32(8u, 0), global.Google.Protobuf.FieldCodec.ForInt32(16u, 0), 10u)
    let MapMap2Codec = global.Google.Protobuf.Collections.MapField<int32, int32>.Codec(global.Google.Protobuf.FieldCodec.ForInt32(8u, 0), global.Google.Protobuf.FieldCodec.ForInt32(16u, 0), 18u)
type TestArenaMap = {
    mutable _UnknownFields: global.Google.Protobuf.UnknownFieldSet
    MapInt32Int32: global.Google.Protobuf.Collections.MapField<int32, int32>
    MapInt64Int64: global.Google.Protobuf.Collections.MapField<int64, int64>
    MapUint32Uint32: global.Google.Protobuf.Collections.MapField<uint32, uint32>
    MapUint64Uint64: global.Google.Protobuf.Collections.MapField<uint64, uint64>
    MapSint32Sint32: global.Google.Protobuf.Collections.MapField<int32, int32>
    MapSint64Sint64: global.Google.Protobuf.Collections.MapField<int64, int64>
    MapFixed32Fixed32: global.Google.Protobuf.Collections.MapField<uint32, uint32>
    MapFixed64Fixed64: global.Google.Protobuf.Collections.MapField<uint64, uint64>
    MapSfixed32Sfixed32: global.Google.Protobuf.Collections.MapField<int32, int32>
    MapSfixed64Sfixed64: global.Google.Protobuf.Collections.MapField<int64, int64>
    MapInt32Float: global.Google.Protobuf.Collections.MapField<int32, float32>
    MapInt32Double: global.Google.Protobuf.Collections.MapField<int32, float>
    MapBoolBool: global.Google.Protobuf.Collections.MapField<bool, bool>
    MapInt32Enum: global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MapEnum>
    MapInt32ForeignMessage: global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.ForeignMessage>
} with
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.Clone() : TestArenaMap = {
        TestArenaMap._UnknownFields = global.Google.Protobuf.UnknownFieldSet.Clone(me._UnknownFields)
        TestArenaMap.MapInt32Int32 = me.MapInt32Int32.Clone()
        TestArenaMap.MapInt64Int64 = me.MapInt64Int64.Clone()
        TestArenaMap.MapUint32Uint32 = me.MapUint32Uint32.Clone()
        TestArenaMap.MapUint64Uint64 = me.MapUint64Uint64.Clone()
        TestArenaMap.MapSint32Sint32 = me.MapSint32Sint32.Clone()
        TestArenaMap.MapSint64Sint64 = me.MapSint64Sint64.Clone()
        TestArenaMap.MapFixed32Fixed32 = me.MapFixed32Fixed32.Clone()
        TestArenaMap.MapFixed64Fixed64 = me.MapFixed64Fixed64.Clone()
        TestArenaMap.MapSfixed32Sfixed32 = me.MapSfixed32Sfixed32.Clone()
        TestArenaMap.MapSfixed64Sfixed64 = me.MapSfixed64Sfixed64.Clone()
        TestArenaMap.MapInt32Float = me.MapInt32Float.Clone()
        TestArenaMap.MapInt32Double = me.MapInt32Double.Clone()
        TestArenaMap.MapBoolBool = me.MapBoolBool.Clone()
        TestArenaMap.MapInt32Enum = me.MapInt32Enum.Clone()
        TestArenaMap.MapInt32ForeignMessage = me.MapInt32ForeignMessage.Clone()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalWriteTo(output: byref<global.Google.Protobuf.WriteContext>) =
        me.MapInt32Int32.WriteTo(&output, TestArenaMap.MapMapInt32Int32Codec)
        me.MapInt64Int64.WriteTo(&output, TestArenaMap.MapMapInt64Int64Codec)
        me.MapUint32Uint32.WriteTo(&output, TestArenaMap.MapMapUint32Uint32Codec)
        me.MapUint64Uint64.WriteTo(&output, TestArenaMap.MapMapUint64Uint64Codec)
        me.MapSint32Sint32.WriteTo(&output, TestArenaMap.MapMapSint32Sint32Codec)
        me.MapSint64Sint64.WriteTo(&output, TestArenaMap.MapMapSint64Sint64Codec)
        me.MapFixed32Fixed32.WriteTo(&output, TestArenaMap.MapMapFixed32Fixed32Codec)
        me.MapFixed64Fixed64.WriteTo(&output, TestArenaMap.MapMapFixed64Fixed64Codec)
        me.MapSfixed32Sfixed32.WriteTo(&output, TestArenaMap.MapMapSfixed32Sfixed32Codec)
        me.MapSfixed64Sfixed64.WriteTo(&output, TestArenaMap.MapMapSfixed64Sfixed64Codec)
        me.MapInt32Float.WriteTo(&output, TestArenaMap.MapMapInt32FloatCodec)
        me.MapInt32Double.WriteTo(&output, TestArenaMap.MapMapInt32DoubleCodec)
        me.MapBoolBool.WriteTo(&output, TestArenaMap.MapMapBoolBoolCodec)
        me.MapInt32Enum.WriteTo(&output, TestArenaMap.MapMapInt32EnumCodec)
        me.MapInt32ForeignMessage.WriteTo(&output, TestArenaMap.MapMapInt32ForeignMessageCodec)
        if not <| isNull me._UnknownFields then me._UnknownFields.WriteTo(&output)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.CalculateSize() =
        let mutable size = 0
        size <- size + me.MapInt32Int32.CalculateSize(TestArenaMap.MapMapInt32Int32Codec)
        size <- size + me.MapInt64Int64.CalculateSize(TestArenaMap.MapMapInt64Int64Codec)
        size <- size + me.MapUint32Uint32.CalculateSize(TestArenaMap.MapMapUint32Uint32Codec)
        size <- size + me.MapUint64Uint64.CalculateSize(TestArenaMap.MapMapUint64Uint64Codec)
        size <- size + me.MapSint32Sint32.CalculateSize(TestArenaMap.MapMapSint32Sint32Codec)
        size <- size + me.MapSint64Sint64.CalculateSize(TestArenaMap.MapMapSint64Sint64Codec)
        size <- size + me.MapFixed32Fixed32.CalculateSize(TestArenaMap.MapMapFixed32Fixed32Codec)
        size <- size + me.MapFixed64Fixed64.CalculateSize(TestArenaMap.MapMapFixed64Fixed64Codec)
        size <- size + me.MapSfixed32Sfixed32.CalculateSize(TestArenaMap.MapMapSfixed32Sfixed32Codec)
        size <- size + me.MapSfixed64Sfixed64.CalculateSize(TestArenaMap.MapMapSfixed64Sfixed64Codec)
        size <- size + me.MapInt32Float.CalculateSize(TestArenaMap.MapMapInt32FloatCodec)
        size <- size + me.MapInt32Double.CalculateSize(TestArenaMap.MapMapInt32DoubleCodec)
        size <- size + me.MapBoolBool.CalculateSize(TestArenaMap.MapMapBoolBoolCodec)
        size <- size + me.MapInt32Enum.CalculateSize(TestArenaMap.MapMapInt32EnumCodec)
        size <- size + me.MapInt32ForeignMessage.CalculateSize(TestArenaMap.MapMapInt32ForeignMessageCodec)
        if not <| isNull me._UnknownFields then size <- size + me._UnknownFields.CalculateSize()
        size
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.MergeFrom(other: TestArenaMap) =
        me.MapInt32Int32.Add(other.MapInt32Int32)
        me.MapInt64Int64.Add(other.MapInt64Int64)
        me.MapUint32Uint32.Add(other.MapUint32Uint32)
        me.MapUint64Uint64.Add(other.MapUint64Uint64)
        me.MapSint32Sint32.Add(other.MapSint32Sint32)
        me.MapSint64Sint64.Add(other.MapSint64Sint64)
        me.MapFixed32Fixed32.Add(other.MapFixed32Fixed32)
        me.MapFixed64Fixed64.Add(other.MapFixed64Fixed64)
        me.MapSfixed32Sfixed32.Add(other.MapSfixed32Sfixed32)
        me.MapSfixed64Sfixed64.Add(other.MapSfixed64Sfixed64)
        me.MapInt32Float.Add(other.MapInt32Float)
        me.MapInt32Double.Add(other.MapInt32Double)
        me.MapBoolBool.Add(other.MapBoolBool)
        me.MapInt32Enum.Add(other.MapInt32Enum)
        me.MapInt32ForeignMessage.Add(other.MapInt32ForeignMessage)
        me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFrom(me._UnknownFields, other._UnknownFields)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalMergeFrom(input: byref<global.Google.Protobuf.ParseContext>) =
        let mutable tag = input.ReadTag()
        while tag <> 0u do
            match tag with
            | 10u ->
                me.MapInt32Int32.AddEntriesFrom(&input, TestArenaMap.MapMapInt32Int32Codec)
            | 18u ->
                me.MapInt64Int64.AddEntriesFrom(&input, TestArenaMap.MapMapInt64Int64Codec)
            | 26u ->
                me.MapUint32Uint32.AddEntriesFrom(&input, TestArenaMap.MapMapUint32Uint32Codec)
            | 34u ->
                me.MapUint64Uint64.AddEntriesFrom(&input, TestArenaMap.MapMapUint64Uint64Codec)
            | 42u ->
                me.MapSint32Sint32.AddEntriesFrom(&input, TestArenaMap.MapMapSint32Sint32Codec)
            | 50u ->
                me.MapSint64Sint64.AddEntriesFrom(&input, TestArenaMap.MapMapSint64Sint64Codec)
            | 58u ->
                me.MapFixed32Fixed32.AddEntriesFrom(&input, TestArenaMap.MapMapFixed32Fixed32Codec)
            | 66u ->
                me.MapFixed64Fixed64.AddEntriesFrom(&input, TestArenaMap.MapMapFixed64Fixed64Codec)
            | 74u ->
                me.MapSfixed32Sfixed32.AddEntriesFrom(&input, TestArenaMap.MapMapSfixed32Sfixed32Codec)
            | 82u ->
                me.MapSfixed64Sfixed64.AddEntriesFrom(&input, TestArenaMap.MapMapSfixed64Sfixed64Codec)
            | 90u ->
                me.MapInt32Float.AddEntriesFrom(&input, TestArenaMap.MapMapInt32FloatCodec)
            | 98u ->
                me.MapInt32Double.AddEntriesFrom(&input, TestArenaMap.MapMapInt32DoubleCodec)
            | 106u ->
                me.MapBoolBool.AddEntriesFrom(&input, TestArenaMap.MapMapBoolBoolCodec)
            | 114u ->
                me.MapInt32Enum.AddEntriesFrom(&input, TestArenaMap.MapMapInt32EnumCodec)
            | 122u ->
                me.MapInt32ForeignMessage.AddEntriesFrom(&input, TestArenaMap.MapMapInt32ForeignMessageCodec)
            | _ ->
                me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFieldFrom(me._UnknownFields, &input)
            tag <- input.ReadTag()
    interface global.Google.Protobuf.IBufferMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalMergeFrom(ctx) = me.InternalMergeFrom(&ctx)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalWriteTo(ctx) = me.InternalWriteTo(&ctx)
    interface global.Google.Protobuf.IMessage<TestArenaMap> with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.Clone() = me.Clone()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(other) = me.MergeFrom(other)
    interface global.Google.Protobuf.IMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.CalculateSize() = me.CalculateSize()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(input) = input.ReadRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.WriteTo(output) = output.WriteRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member __.Descriptor = global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MapUnittestProto3Reflection.TestArenaMap_Descriptor()
module TestArenaMap =
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal DefaultValue = {
        TestArenaMap._UnknownFields = null
        TestArenaMap.MapInt32Int32 = global.Google.Protobuf.Collections.MapField<int32, int32>()
        TestArenaMap.MapInt64Int64 = global.Google.Protobuf.Collections.MapField<int64, int64>()
        TestArenaMap.MapUint32Uint32 = global.Google.Protobuf.Collections.MapField<uint32, uint32>()
        TestArenaMap.MapUint64Uint64 = global.Google.Protobuf.Collections.MapField<uint64, uint64>()
        TestArenaMap.MapSint32Sint32 = global.Google.Protobuf.Collections.MapField<int32, int32>()
        TestArenaMap.MapSint64Sint64 = global.Google.Protobuf.Collections.MapField<int64, int64>()
        TestArenaMap.MapFixed32Fixed32 = global.Google.Protobuf.Collections.MapField<uint32, uint32>()
        TestArenaMap.MapFixed64Fixed64 = global.Google.Protobuf.Collections.MapField<uint64, uint64>()
        TestArenaMap.MapSfixed32Sfixed32 = global.Google.Protobuf.Collections.MapField<int32, int32>()
        TestArenaMap.MapSfixed64Sfixed64 = global.Google.Protobuf.Collections.MapField<int64, int64>()
        TestArenaMap.MapInt32Float = global.Google.Protobuf.Collections.MapField<int32, float32>()
        TestArenaMap.MapInt32Double = global.Google.Protobuf.Collections.MapField<int32, float>()
        TestArenaMap.MapBoolBool = global.Google.Protobuf.Collections.MapField<bool, bool>()
        TestArenaMap.MapInt32Enum = global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MapEnum>()
        TestArenaMap.MapInt32ForeignMessage = global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.ForeignMessage>()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let empty () = {
        TestArenaMap._UnknownFields = null
        TestArenaMap.MapInt32Int32 = global.Google.Protobuf.Collections.MapField<int32, int32>()
        TestArenaMap.MapInt64Int64 = global.Google.Protobuf.Collections.MapField<int64, int64>()
        TestArenaMap.MapUint32Uint32 = global.Google.Protobuf.Collections.MapField<uint32, uint32>()
        TestArenaMap.MapUint64Uint64 = global.Google.Protobuf.Collections.MapField<uint64, uint64>()
        TestArenaMap.MapSint32Sint32 = global.Google.Protobuf.Collections.MapField<int32, int32>()
        TestArenaMap.MapSint64Sint64 = global.Google.Protobuf.Collections.MapField<int64, int64>()
        TestArenaMap.MapFixed32Fixed32 = global.Google.Protobuf.Collections.MapField<uint32, uint32>()
        TestArenaMap.MapFixed64Fixed64 = global.Google.Protobuf.Collections.MapField<uint64, uint64>()
        TestArenaMap.MapSfixed32Sfixed32 = global.Google.Protobuf.Collections.MapField<int32, int32>()
        TestArenaMap.MapSfixed64Sfixed64 = global.Google.Protobuf.Collections.MapField<int64, int64>()
        TestArenaMap.MapInt32Float = global.Google.Protobuf.Collections.MapField<int32, float32>()
        TestArenaMap.MapInt32Double = global.Google.Protobuf.Collections.MapField<int32, float>()
        TestArenaMap.MapBoolBool = global.Google.Protobuf.Collections.MapField<bool, bool>()
        TestArenaMap.MapInt32Enum = global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MapEnum>()
        TestArenaMap.MapInt32ForeignMessage = global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.ForeignMessage>()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let Parser = global.Google.Protobuf.MessageParser<TestArenaMap>(global.System.Func<_>(empty))
    let MapInt32Int32FieldNumber = 1
    let MapInt64Int64FieldNumber = 2
    let MapUint32Uint32FieldNumber = 3
    let MapUint64Uint64FieldNumber = 4
    let MapSint32Sint32FieldNumber = 5
    let MapSint64Sint64FieldNumber = 6
    let MapFixed32Fixed32FieldNumber = 7
    let MapFixed64Fixed64FieldNumber = 8
    let MapSfixed32Sfixed32FieldNumber = 9
    let MapSfixed64Sfixed64FieldNumber = 10
    let MapInt32FloatFieldNumber = 11
    let MapInt32DoubleFieldNumber = 12
    let MapBoolBoolFieldNumber = 13
    let MapInt32EnumFieldNumber = 14
    let MapInt32ForeignMessageFieldNumber = 15
    let MapMapInt32Int32Codec = global.Google.Protobuf.Collections.MapField<int32, int32>.Codec(global.Google.Protobuf.FieldCodec.ForInt32(8u, 0), global.Google.Protobuf.FieldCodec.ForInt32(16u, 0), 10u)
    let MapMapInt64Int64Codec = global.Google.Protobuf.Collections.MapField<int64, int64>.Codec(global.Google.Protobuf.FieldCodec.ForInt64(8u, 0L), global.Google.Protobuf.FieldCodec.ForInt64(16u, 0L), 18u)
    let MapMapUint32Uint32Codec = global.Google.Protobuf.Collections.MapField<uint32, uint32>.Codec(global.Google.Protobuf.FieldCodec.ForUInt32(8u, 0u), global.Google.Protobuf.FieldCodec.ForUInt32(16u, 0u), 26u)
    let MapMapUint64Uint64Codec = global.Google.Protobuf.Collections.MapField<uint64, uint64>.Codec(global.Google.Protobuf.FieldCodec.ForUInt64(8u, 0UL), global.Google.Protobuf.FieldCodec.ForUInt64(16u, 0UL), 34u)
    let MapMapSint32Sint32Codec = global.Google.Protobuf.Collections.MapField<int32, int32>.Codec(global.Google.Protobuf.FieldCodec.ForSInt32(8u, 0), global.Google.Protobuf.FieldCodec.ForSInt32(16u, 0), 42u)
    let MapMapSint64Sint64Codec = global.Google.Protobuf.Collections.MapField<int64, int64>.Codec(global.Google.Protobuf.FieldCodec.ForSInt64(8u, 0L), global.Google.Protobuf.FieldCodec.ForSInt64(16u, 0L), 50u)
    let MapMapFixed32Fixed32Codec = global.Google.Protobuf.Collections.MapField<uint32, uint32>.Codec(global.Google.Protobuf.FieldCodec.ForFixed32(13u, 0u), global.Google.Protobuf.FieldCodec.ForFixed32(21u, 0u), 58u)
    let MapMapFixed64Fixed64Codec = global.Google.Protobuf.Collections.MapField<uint64, uint64>.Codec(global.Google.Protobuf.FieldCodec.ForFixed64(9u, 0UL), global.Google.Protobuf.FieldCodec.ForFixed64(17u, 0UL), 66u)
    let MapMapSfixed32Sfixed32Codec = global.Google.Protobuf.Collections.MapField<int32, int32>.Codec(global.Google.Protobuf.FieldCodec.ForSFixed32(13u, 0), global.Google.Protobuf.FieldCodec.ForSFixed32(21u, 0), 74u)
    let MapMapSfixed64Sfixed64Codec = global.Google.Protobuf.Collections.MapField<int64, int64>.Codec(global.Google.Protobuf.FieldCodec.ForSFixed64(9u, 0L), global.Google.Protobuf.FieldCodec.ForSFixed64(17u, 0L), 82u)
    let MapMapInt32FloatCodec = global.Google.Protobuf.Collections.MapField<int32, float32>.Codec(global.Google.Protobuf.FieldCodec.ForInt32(8u, 0), global.Google.Protobuf.FieldCodec.ForFloat(21u, 0f), 90u)
    let MapMapInt32DoubleCodec = global.Google.Protobuf.Collections.MapField<int32, float>.Codec(global.Google.Protobuf.FieldCodec.ForInt32(8u, 0), global.Google.Protobuf.FieldCodec.ForDouble(17u, 0.0), 98u)
    let MapMapBoolBoolCodec = global.Google.Protobuf.Collections.MapField<bool, bool>.Codec(global.Google.Protobuf.FieldCodec.ForBool(8u, false), global.Google.Protobuf.FieldCodec.ForBool(16u, false), 106u)
    let MapMapInt32EnumCodec = global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MapEnum>.Codec(global.Google.Protobuf.FieldCodec.ForInt32(8u, 0), global.Google.Protobuf.FieldCodec.ForEnum(16u, global.System.Func<_,_>(fun x -> int x), global.System.Func<_,_>(fun x -> enum x), global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MapEnum.Foo), 114u)
    let MapMapInt32ForeignMessageCodec = global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.ForeignMessage>.Codec(global.Google.Protobuf.FieldCodec.ForInt32(8u, 0), global.Google.Protobuf.FieldCodec.ForMessage(18u, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.ForeignMessage.Parser), 122u)
type MessageContainingEnumCalledType = {
    mutable _UnknownFields: global.Google.Protobuf.UnknownFieldSet
    Type: global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MessageContainingEnumCalledType>
} with
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.Clone() : MessageContainingEnumCalledType = {
        MessageContainingEnumCalledType._UnknownFields = global.Google.Protobuf.UnknownFieldSet.Clone(me._UnknownFields)
        MessageContainingEnumCalledType.Type = me.Type.Clone()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalWriteTo(output: byref<global.Google.Protobuf.WriteContext>) =
        me.Type.WriteTo(&output, MessageContainingEnumCalledType.MapTypeCodec)
        if not <| isNull me._UnknownFields then me._UnknownFields.WriteTo(&output)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.CalculateSize() =
        let mutable size = 0
        size <- size + me.Type.CalculateSize(MessageContainingEnumCalledType.MapTypeCodec)
        if not <| isNull me._UnknownFields then size <- size + me._UnknownFields.CalculateSize()
        size
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.MergeFrom(other: MessageContainingEnumCalledType) =
        me.Type.Add(other.Type)
        me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFrom(me._UnknownFields, other._UnknownFields)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalMergeFrom(input: byref<global.Google.Protobuf.ParseContext>) =
        let mutable tag = input.ReadTag()
        while tag <> 0u do
            match tag with
            | 10u ->
                me.Type.AddEntriesFrom(&input, MessageContainingEnumCalledType.MapTypeCodec)
            | _ ->
                me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFieldFrom(me._UnknownFields, &input)
            tag <- input.ReadTag()
    interface global.Google.Protobuf.IBufferMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalMergeFrom(ctx) = me.InternalMergeFrom(&ctx)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalWriteTo(ctx) = me.InternalWriteTo(&ctx)
    interface global.Google.Protobuf.IMessage<MessageContainingEnumCalledType> with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.Clone() = me.Clone()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(other) = me.MergeFrom(other)
    interface global.Google.Protobuf.IMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.CalculateSize() = me.CalculateSize()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(input) = input.ReadRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.WriteTo(output) = output.WriteRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member __.Descriptor = global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MapUnittestProto3Reflection.MessageContainingEnumCalledType_Descriptor()
module MessageContainingEnumCalledType =
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal DefaultValue = {
        MessageContainingEnumCalledType._UnknownFields = null
        MessageContainingEnumCalledType.Type = global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MessageContainingEnumCalledType>()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let empty () = {
        MessageContainingEnumCalledType._UnknownFields = null
        MessageContainingEnumCalledType.Type = global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MessageContainingEnumCalledType>()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let Parser = global.Google.Protobuf.MessageParser<MessageContainingEnumCalledType>(global.System.Func<_>(empty))
    let TypeFieldNumber = 1
    let MapTypeCodec = global.Google.Protobuf.Collections.MapField<int32, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MessageContainingEnumCalledType>.Codec(global.Google.Protobuf.FieldCodec.ForInt32(8u, 0), global.Google.Protobuf.FieldCodec.ForMessage(18u, global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MessageContainingEnumCalledType.Parser), 10u)
    module Types =
        type Type =
        | [<global.Google.Protobuf.Reflection.OriginalName("TYPE_FOO")>] Foo = 0
type MessageContainingMapCalledEntry = {
    mutable _UnknownFields: global.Google.Protobuf.UnknownFieldSet
    Entry: global.Google.Protobuf.Collections.MapField<int32, int32>
} with
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.Clone() : MessageContainingMapCalledEntry = {
        MessageContainingMapCalledEntry._UnknownFields = global.Google.Protobuf.UnknownFieldSet.Clone(me._UnknownFields)
        MessageContainingMapCalledEntry.Entry = me.Entry.Clone()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalWriteTo(output: byref<global.Google.Protobuf.WriteContext>) =
        me.Entry.WriteTo(&output, MessageContainingMapCalledEntry.MapEntryCodec)
        if not <| isNull me._UnknownFields then me._UnknownFields.WriteTo(&output)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.CalculateSize() =
        let mutable size = 0
        size <- size + me.Entry.CalculateSize(MessageContainingMapCalledEntry.MapEntryCodec)
        if not <| isNull me._UnknownFields then size <- size + me._UnknownFields.CalculateSize()
        size
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.MergeFrom(other: MessageContainingMapCalledEntry) =
        me.Entry.Add(other.Entry)
        me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFrom(me._UnknownFields, other._UnknownFields)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalMergeFrom(input: byref<global.Google.Protobuf.ParseContext>) =
        let mutable tag = input.ReadTag()
        while tag <> 0u do
            match tag with
            | 10u ->
                me.Entry.AddEntriesFrom(&input, MessageContainingMapCalledEntry.MapEntryCodec)
            | _ ->
                me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFieldFrom(me._UnknownFields, &input)
            tag <- input.ReadTag()
    interface global.Google.Protobuf.IBufferMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalMergeFrom(ctx) = me.InternalMergeFrom(&ctx)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalWriteTo(ctx) = me.InternalWriteTo(&ctx)
    interface global.Google.Protobuf.IMessage<MessageContainingMapCalledEntry> with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.Clone() = me.Clone()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(other) = me.MergeFrom(other)
    interface global.Google.Protobuf.IMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.CalculateSize() = me.CalculateSize()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(input) = input.ReadRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.WriteTo(output) = output.WriteRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member __.Descriptor = global.FSharp.GrpcCodeGenerator.TestProtos.FSharp.MapUnittestProto3Reflection.MessageContainingMapCalledEntry_Descriptor()
module MessageContainingMapCalledEntry =
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal DefaultValue = {
        MessageContainingMapCalledEntry._UnknownFields = null
        MessageContainingMapCalledEntry.Entry = global.Google.Protobuf.Collections.MapField<int32, int32>()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let empty () = {
        MessageContainingMapCalledEntry._UnknownFields = null
        MessageContainingMapCalledEntry.Entry = global.Google.Protobuf.Collections.MapField<int32, int32>()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let Parser = global.Google.Protobuf.MessageParser<MessageContainingMapCalledEntry>(global.System.Func<_>(empty))
    let EntryFieldNumber = 1
    let MapEntryCodec = global.Google.Protobuf.Collections.MapField<int32, int32>.Codec(global.Google.Protobuf.FieldCodec.ForInt32(8u, 0), global.Google.Protobuf.FieldCodec.ForInt32(16u, 0), 10u)
// End of auto-generated code
