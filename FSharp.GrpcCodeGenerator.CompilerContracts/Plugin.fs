// <auto-generated>
//     Generated by the F# GRPC code generator. DO NOT EDIT!
//     source: google/protobuf/compiler/plugin.proto
// </auto-generated>
namespace rec Google.Protobuf.FSharp.Compiler
#nowarn "40"
module PluginReflection =
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal Version_Descriptor() = Descriptor().MessageTypes.[0]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal CodeGeneratorRequest_Descriptor() = Descriptor().MessageTypes.[1]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal CodeGeneratorResponse_Descriptor() = Descriptor().MessageTypes.[2]
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal CodeGeneratorResponse_File_Descriptor() = CodeGeneratorResponse_Descriptor().NestedTypes.[0]
    let private descriptorBackingField: global.System.Lazy<global.Google.Protobuf.Reflection.FileDescriptor> =
        let descriptorData = global.System.Convert.FromBase64String("\
            CiVnb29nbGUvcHJvdG9idWYvY29tcGlsZXIvcGx1Z2luLnByb3RvEhhnb29nbGUucHJvdG9idWYuY29t\
            cGlsZXIaIGdvb2dsZS9wcm90b2J1Zi9kZXNjcmlwdG9yLnByb3RvImMKB1ZlcnNpb24SFAoFbWFqb3IY\
            ASABKAVSBW1ham9yEhQKBW1pbm9yGAIgASgFUgVtaW5vchIUCgVwYXRjaBgDIAEoBVIFcGF0Y2gSFgoG\
            c3VmZml4GAQgASgJUgZzdWZmaXgi8QEKFENvZGVHZW5lcmF0b3JSZXF1ZXN0EigKEGZpbGVfdG9fZ2Vu\
            ZXJhdGUYASADKAlSDmZpbGVUb0dlbmVyYXRlEhwKCXBhcmFtZXRlchgCIAEoCVIJcGFyYW1ldGVyEkMK\
            CnByb3RvX2ZpbGUYDyADKAsyJC5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90b1IJcHJv\
            dG9GaWxlEkwKEGNvbXBpbGVyX3ZlcnNpb24YAyABKAsyIS5nb29nbGUucHJvdG9idWYuY29tcGlsZXIu\
            VmVyc2lvblIPY29tcGlsZXJWZXJzaW9uIpQDChVDb2RlR2VuZXJhdG9yUmVzcG9uc2USFAoFZXJyb3IY\
            ASABKAlSBWVycm9yEi0KEnN1cHBvcnRlZF9mZWF0dXJlcxgCIAEoBFIRc3VwcG9ydGVkRmVhdHVyZXMS\
            SAoEZmlsZRgPIAMoCzI0Lmdvb2dsZS5wcm90b2J1Zi5jb21waWxlci5Db2RlR2VuZXJhdG9yUmVzcG9u\
            c2UuRmlsZVIEZmlsZRqxAQoERmlsZRISCgRuYW1lGAEgASgJUgRuYW1lEicKD2luc2VydGlvbl9wb2lu\
            dBgCIAEoCVIOaW5zZXJ0aW9uUG9pbnQSGAoHY29udGVudBgPIAEoCVIHY29udGVudBJSChNnZW5lcmF0\
            ZWRfY29kZV9pbmZvGBAgASgLMiIuZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvUhFnZW5l\
            cmF0ZWRDb2RlSW5mbyI4CgdGZWF0dXJlEhAKDEZFQVRVUkVfTk9ORRAAEhsKF0ZFQVRVUkVfUFJPVE8z\
            X09QVElPTkFMEAFCVwocY29tLmdvb2dsZS5wcm90b2J1Zi5jb21waWxlckIMUGx1Z2luUHJvdG9zWiln\
            b29nbGUuZ29sYW5nLm9yZy9wcm90b2J1Zi90eXBlcy9wbHVnaW5wYg==")
        global.System.Lazy<_>(
            (fun () ->
                global.Google.Protobuf.Reflection.FileDescriptor.FromGeneratedCode(
                    descriptorData,
                    [|
                        global.Google.Protobuf.FSharp.Reflection.DescriptorReflection.Descriptor()
                    |],
                    new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(
                        null,
                        null,
                        [|
                            new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(typeof<global.Google.Protobuf.FSharp.Compiler.Version>, global.Google.Protobuf.FSharp.Compiler.Version.Parser, [| "Major"; "Minor"; "Patch"; "Suffix" |], null, null, null, null)
                            new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(typeof<global.Google.Protobuf.FSharp.Compiler.CodeGeneratorRequest>, global.Google.Protobuf.FSharp.Compiler.CodeGeneratorRequest.Parser, [| "FileToGenerate"; "Parameter"; "ProtoFile"; "CompilerVersion" |], null, null, null, null)
                            new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(typeof<global.Google.Protobuf.FSharp.Compiler.CodeGeneratorResponse>, global.Google.Protobuf.FSharp.Compiler.CodeGeneratorResponse.Parser, [| "Error"; "SupportedFeatures"; "File" |], null, [| typeof<global.Google.Protobuf.FSharp.Compiler.CodeGeneratorResponse.Types.Feature> |], null, [| new global.Google.Protobuf.Reflection.GeneratedClrTypeInfo(typeof<global.Google.Protobuf.FSharp.Compiler.CodeGeneratorResponse.Types.File>, global.Google.Protobuf.FSharp.Compiler.CodeGeneratorResponse.Types.File.Parser, [| "Name"; "InsertionPoint"; "Content"; "GeneratedCodeInfo" |], null, null, null, null) |])
                        |]
                    )
                )
            ),
            true
        )
    let Descriptor(): global.Google.Protobuf.Reflection.FileDescriptor = descriptorBackingField.Value
type Version = {
    mutable _UnknownFields: global.Google.Protobuf.UnknownFieldSet
    mutable Major: ValueOption<int32>
    mutable Minor: ValueOption<int32>
    mutable Patch: ValueOption<int32>
    mutable Suffix: ValueOption<string>
} with
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.Clone() : Version = {
        Version._UnknownFields = global.Google.Protobuf.UnknownFieldSet.Clone(me._UnknownFields)
        Version.Major = me.Major
        Version.Minor = me.Minor
        Version.Patch = me.Patch
        Version.Suffix = me.Suffix
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    override me.ToString() = global.Google.Protobuf.JsonFormatter.ToDiagnosticString(me)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalWriteTo(output: byref<global.Google.Protobuf.WriteContext>) =
        if me.Major <> ValueNone
        then
            output.WriteRawTag(8uy)
            output.WriteInt32(me.Major.Value)
        if me.Minor <> ValueNone
        then
            output.WriteRawTag(16uy)
            output.WriteInt32(me.Minor.Value)
        if me.Patch <> ValueNone
        then
            output.WriteRawTag(24uy)
            output.WriteInt32(me.Patch.Value)
        if me.Suffix <> ValueNone
        then
            output.WriteRawTag(34uy)
            output.WriteString(me.Suffix.Value)
        if not <| isNull me._UnknownFields then me._UnknownFields.WriteTo(&output)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.CalculateSize() =
        let mutable size = 0
        if me.Major <> ValueNone then size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeInt32Size(me.Major.Value)
        if me.Minor <> ValueNone then size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeInt32Size(me.Minor.Value)
        if me.Patch <> ValueNone then size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeInt32Size(me.Patch.Value)
        if me.Suffix <> ValueNone then size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeStringSize(me.Suffix.Value)
        if not <| isNull me._UnknownFields then size <- size + me._UnknownFields.CalculateSize()
        size
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.MergeFrom(other: Version) =
        if other.Major <> ValueNone
        then me.Major <- other.Major
        if other.Minor <> ValueNone
        then me.Minor <- other.Minor
        if other.Patch <> ValueNone
        then me.Patch <- other.Patch
        if other.Suffix <> ValueNone
        then me.Suffix <- other.Suffix
        me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFrom(me._UnknownFields, other._UnknownFields)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalMergeFrom(input: byref<global.Google.Protobuf.ParseContext>) =
        let mutable tag = input.ReadTag()
        while tag <> 0u do
            match tag with
            | 8u ->
                me.Major <- ValueSome(input.ReadInt32())
            | 16u ->
                me.Minor <- ValueSome(input.ReadInt32())
            | 24u ->
                me.Patch <- ValueSome(input.ReadInt32())
            | 34u ->
                me.Suffix <- ValueSome(input.ReadString())
            | _ ->
                me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFieldFrom(me._UnknownFields, &input)
            tag <- input.ReadTag()
    interface global.Google.Protobuf.IBufferMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalMergeFrom(ctx) = me.InternalMergeFrom(&ctx)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalWriteTo(ctx) = me.InternalWriteTo(&ctx)
    interface global.Google.Protobuf.IMessage<Version> with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.Clone() = me.Clone()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(other) = me.MergeFrom(other)
    interface global.Google.Protobuf.IMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.CalculateSize() = me.CalculateSize()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(input) = input.ReadRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.WriteTo(output) = output.WriteRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member __.Descriptor = global.Google.Protobuf.FSharp.Compiler.PluginReflection.Version_Descriptor()
module Version =
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal DefaultValue = {
        Version._UnknownFields = null
        Version.Major = ValueNone
        Version.Minor = ValueNone
        Version.Patch = ValueNone
        Version.Suffix = ValueNone
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let empty () = {
        Version._UnknownFields = null
        Version.Major = ValueNone
        Version.Minor = ValueNone
        Version.Patch = ValueNone
        Version.Suffix = ValueNone
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let Parser = global.Google.Protobuf.MessageParser<Version>(global.System.Func<_>(empty))
    let MajorFieldNumber = 1
    let MinorFieldNumber = 2
    let PatchFieldNumber = 3
    let SuffixFieldNumber = 4
type CodeGeneratorRequest = {
    mutable _UnknownFields: global.Google.Protobuf.UnknownFieldSet
    FileToGenerate: global.Google.Protobuf.Collections.RepeatedField<string>
    mutable Parameter: ValueOption<string>
    mutable CompilerVersion: ValueOption<global.Google.Protobuf.FSharp.Compiler.Version>
    ProtoFile: global.Google.Protobuf.Collections.RepeatedField<global.Google.Protobuf.FSharp.Reflection.FileDescriptorProto>
} with
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.Clone() : CodeGeneratorRequest = {
        CodeGeneratorRequest._UnknownFields = global.Google.Protobuf.UnknownFieldSet.Clone(me._UnknownFields)
        CodeGeneratorRequest.FileToGenerate = me.FileToGenerate.Clone()
        CodeGeneratorRequest.Parameter = me.Parameter
        CodeGeneratorRequest.CompilerVersion = me.CompilerVersion |> global.Microsoft.FSharp.Core.ValueOption.map (fun x -> (x :> global.Google.Protobuf.IMessage<global.Google.Protobuf.FSharp.Compiler.Version>).Clone())
        CodeGeneratorRequest.ProtoFile = me.ProtoFile.Clone()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    override me.ToString() = global.Google.Protobuf.JsonFormatter.ToDiagnosticString(me)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalWriteTo(output: byref<global.Google.Protobuf.WriteContext>) =
        me.FileToGenerate.WriteTo(&output, CodeGeneratorRequest.RepeatedFileToGenerateCodec)
        if me.Parameter <> ValueNone
        then
            output.WriteRawTag(18uy)
            output.WriteString(me.Parameter.Value)
        if me.CompilerVersion <> ValueNone
        then
            output.WriteRawTag(26uy)
            output.WriteMessage(me.CompilerVersion.Value)
        me.ProtoFile.WriteTo(&output, CodeGeneratorRequest.RepeatedProtoFileCodec)
        if not <| isNull me._UnknownFields then me._UnknownFields.WriteTo(&output)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.CalculateSize() =
        let mutable size = 0
        size <- size + me.FileToGenerate.CalculateSize(CodeGeneratorRequest.RepeatedFileToGenerateCodec)
        if me.Parameter <> ValueNone then size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeStringSize(me.Parameter.Value)
        if me.CompilerVersion <> ValueNone then size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeMessageSize(me.CompilerVersion.Value)
        size <- size + me.ProtoFile.CalculateSize(CodeGeneratorRequest.RepeatedProtoFileCodec)
        if not <| isNull me._UnknownFields then size <- size + me._UnknownFields.CalculateSize()
        size
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.MergeFrom(other: CodeGeneratorRequest) =
        me.FileToGenerate.Add(other.FileToGenerate)
        if other.Parameter <> ValueNone
        then me.Parameter <- other.Parameter
        if other.CompilerVersion <> ValueNone
        then
            if me.CompilerVersion.IsNone
            then me.CompilerVersion <- ValueSome(global.Google.Protobuf.FSharp.Compiler.Version.empty())
            (me.CompilerVersion.Value :> global.Google.Protobuf.IMessage<global.Google.Protobuf.FSharp.Compiler.Version>).MergeFrom(other.CompilerVersion.Value)
        me.ProtoFile.Add(other.ProtoFile)
        me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFrom(me._UnknownFields, other._UnknownFields)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalMergeFrom(input: byref<global.Google.Protobuf.ParseContext>) =
        let mutable tag = input.ReadTag()
        while tag <> 0u do
            match tag with
            | 10u ->
                me.FileToGenerate.AddEntriesFrom(&input,CodeGeneratorRequest.RepeatedFileToGenerateCodec)
            | 18u ->
                me.Parameter <- ValueSome(input.ReadString())
            | 26u ->
                if me.CompilerVersion.IsNone
                then me.CompilerVersion <- ValueSome(global.Google.Protobuf.FSharp.Compiler.Version.empty())
                input.ReadMessage(me.CompilerVersion.Value)
            | 122u ->
                me.ProtoFile.AddEntriesFrom(&input,CodeGeneratorRequest.RepeatedProtoFileCodec)
            | _ ->
                me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFieldFrom(me._UnknownFields, &input)
            tag <- input.ReadTag()
    interface global.Google.Protobuf.IBufferMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalMergeFrom(ctx) = me.InternalMergeFrom(&ctx)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalWriteTo(ctx) = me.InternalWriteTo(&ctx)
    interface global.Google.Protobuf.IMessage<CodeGeneratorRequest> with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.Clone() = me.Clone()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(other) = me.MergeFrom(other)
    interface global.Google.Protobuf.IMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.CalculateSize() = me.CalculateSize()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(input) = input.ReadRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.WriteTo(output) = output.WriteRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member __.Descriptor = global.Google.Protobuf.FSharp.Compiler.PluginReflection.CodeGeneratorRequest_Descriptor()
module CodeGeneratorRequest =
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal DefaultValue = {
        CodeGeneratorRequest._UnknownFields = null
        CodeGeneratorRequest.FileToGenerate = global.Google.Protobuf.Collections.RepeatedField<string>()
        CodeGeneratorRequest.Parameter = ValueNone
        CodeGeneratorRequest.CompilerVersion = ValueNone
        CodeGeneratorRequest.ProtoFile = global.Google.Protobuf.Collections.RepeatedField<global.Google.Protobuf.FSharp.Reflection.FileDescriptorProto>()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let empty () = {
        CodeGeneratorRequest._UnknownFields = null
        CodeGeneratorRequest.FileToGenerate = global.Google.Protobuf.Collections.RepeatedField<string>()
        CodeGeneratorRequest.Parameter = ValueNone
        CodeGeneratorRequest.CompilerVersion = ValueNone
        CodeGeneratorRequest.ProtoFile = global.Google.Protobuf.Collections.RepeatedField<global.Google.Protobuf.FSharp.Reflection.FileDescriptorProto>()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let Parser = global.Google.Protobuf.MessageParser<CodeGeneratorRequest>(global.System.Func<_>(empty))
    let FileToGenerateFieldNumber = 1
    let ParameterFieldNumber = 2
    let ProtoFileFieldNumber = 15
    let CompilerVersionFieldNumber = 3
    let RepeatedFileToGenerateCodec = global.Google.Protobuf.FieldCodec.ForString(10u)
    let RepeatedProtoFileCodec = global.Google.Protobuf.FieldCodec.ForMessage(122u, global.Google.Protobuf.FSharp.Reflection.FileDescriptorProto.Parser)
type CodeGeneratorResponse = {
    mutable _UnknownFields: global.Google.Protobuf.UnknownFieldSet
    mutable Error: ValueOption<string>
    mutable SupportedFeatures: ValueOption<uint64>
    File: global.Google.Protobuf.Collections.RepeatedField<global.Google.Protobuf.FSharp.Compiler.CodeGeneratorResponse.Types.File>
} with
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member me.Clone() : CodeGeneratorResponse = {
        CodeGeneratorResponse._UnknownFields = global.Google.Protobuf.UnknownFieldSet.Clone(me._UnknownFields)
        CodeGeneratorResponse.Error = me.Error
        CodeGeneratorResponse.SupportedFeatures = me.SupportedFeatures
        CodeGeneratorResponse.File = me.File.Clone()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    override me.ToString() = global.Google.Protobuf.JsonFormatter.ToDiagnosticString(me)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalWriteTo(output: byref<global.Google.Protobuf.WriteContext>) =
        if me.Error <> ValueNone
        then
            output.WriteRawTag(10uy)
            output.WriteString(me.Error.Value)
        if me.SupportedFeatures <> ValueNone
        then
            output.WriteRawTag(16uy)
            output.WriteUInt64(me.SupportedFeatures.Value)
        me.File.WriteTo(&output, CodeGeneratorResponse.RepeatedFileCodec)
        if not <| isNull me._UnknownFields then me._UnknownFields.WriteTo(&output)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.CalculateSize() =
        let mutable size = 0
        if me.Error <> ValueNone then size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeStringSize(me.Error.Value)
        if me.SupportedFeatures <> ValueNone then size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeUInt64Size(me.SupportedFeatures.Value)
        size <- size + me.File.CalculateSize(CodeGeneratorResponse.RepeatedFileCodec)
        if not <| isNull me._UnknownFields then size <- size + me._UnknownFields.CalculateSize()
        size
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.MergeFrom(other: CodeGeneratorResponse) =
        if other.Error <> ValueNone
        then me.Error <- other.Error
        if other.SupportedFeatures <> ValueNone
        then me.SupportedFeatures <- other.SupportedFeatures
        me.File.Add(other.File)
        me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFrom(me._UnknownFields, other._UnknownFields)
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member private me.InternalMergeFrom(input: byref<global.Google.Protobuf.ParseContext>) =
        let mutable tag = input.ReadTag()
        while tag <> 0u do
            match tag with
            | 10u ->
                me.Error <- ValueSome(input.ReadString())
            | 16u ->
                me.SupportedFeatures <- ValueSome(input.ReadUInt64())
            | 122u ->
                me.File.AddEntriesFrom(&input,CodeGeneratorResponse.RepeatedFileCodec)
            | _ ->
                me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFieldFrom(me._UnknownFields, &input)
            tag <- input.ReadTag()
    interface global.Google.Protobuf.IBufferMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalMergeFrom(ctx) = me.InternalMergeFrom(&ctx)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.InternalWriteTo(ctx) = me.InternalWriteTo(&ctx)
    interface global.Google.Protobuf.IMessage<CodeGeneratorResponse> with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.Clone() = me.Clone()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(other) = me.MergeFrom(other)
    interface global.Google.Protobuf.IMessage with
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.CalculateSize() = me.CalculateSize()
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.MergeFrom(input) = input.ReadRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member me.WriteTo(output) = output.WriteRawMessage(me)
        [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
        member __.Descriptor = global.Google.Protobuf.FSharp.Compiler.PluginReflection.CodeGeneratorResponse_Descriptor()
module CodeGeneratorResponse =
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let internal DefaultValue = {
        CodeGeneratorResponse._UnknownFields = null
        CodeGeneratorResponse.Error = ValueNone
        CodeGeneratorResponse.SupportedFeatures = ValueNone
        CodeGeneratorResponse.File = global.Google.Protobuf.Collections.RepeatedField<global.Google.Protobuf.FSharp.Compiler.CodeGeneratorResponse.Types.File>()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let empty () = {
        CodeGeneratorResponse._UnknownFields = null
        CodeGeneratorResponse.Error = ValueNone
        CodeGeneratorResponse.SupportedFeatures = ValueNone
        CodeGeneratorResponse.File = global.Google.Protobuf.Collections.RepeatedField<global.Google.Protobuf.FSharp.Compiler.CodeGeneratorResponse.Types.File>()
    }
    [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
    let Parser = global.Google.Protobuf.MessageParser<CodeGeneratorResponse>(global.System.Func<_>(empty))
    let ErrorFieldNumber = 1
    let SupportedFeaturesFieldNumber = 2
    let FileFieldNumber = 15
    let RepeatedFileCodec = global.Google.Protobuf.FieldCodec.ForMessage(122u, global.Google.Protobuf.FSharp.Compiler.CodeGeneratorResponse.Types.File.Parser)
    module Types =
        type Feature =
        | [<global.Google.Protobuf.Reflection.OriginalName("FEATURE_NONE")>] None = 0
        | [<global.Google.Protobuf.Reflection.OriginalName("FEATURE_PROTO3_OPTIONAL")>] Proto3Optional = 1
        type File = {
            mutable _UnknownFields: global.Google.Protobuf.UnknownFieldSet
            mutable Name: ValueOption<string>
            mutable InsertionPoint: ValueOption<string>
            mutable Content: ValueOption<string>
            mutable GeneratedCodeInfo: ValueOption<global.Google.Protobuf.FSharp.Reflection.GeneratedCodeInfo>
        } with
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            member me.Clone() : File = {
                File._UnknownFields = global.Google.Protobuf.UnknownFieldSet.Clone(me._UnknownFields)
                File.Name = me.Name
                File.InsertionPoint = me.InsertionPoint
                File.Content = me.Content
                File.GeneratedCodeInfo = me.GeneratedCodeInfo |> global.Microsoft.FSharp.Core.ValueOption.map (fun x -> (x :> global.Google.Protobuf.IMessage<global.Google.Protobuf.FSharp.Reflection.GeneratedCodeInfo>).Clone())
            }
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            override me.ToString() = global.Google.Protobuf.JsonFormatter.ToDiagnosticString(me)
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            member private me.InternalWriteTo(output: byref<global.Google.Protobuf.WriteContext>) =
                if me.Name <> ValueNone
                then
                    output.WriteRawTag(10uy)
                    output.WriteString(me.Name.Value)
                if me.InsertionPoint <> ValueNone
                then
                    output.WriteRawTag(18uy)
                    output.WriteString(me.InsertionPoint.Value)
                if me.Content <> ValueNone
                then
                    output.WriteRawTag(122uy)
                    output.WriteString(me.Content.Value)
                if me.GeneratedCodeInfo <> ValueNone
                then
                    output.WriteRawTag(130uy, 1uy)
                    output.WriteMessage(me.GeneratedCodeInfo.Value)
                if not <| isNull me._UnknownFields then me._UnknownFields.WriteTo(&output)
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            member private me.CalculateSize() =
                let mutable size = 0
                if me.Name <> ValueNone then size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeStringSize(me.Name.Value)
                if me.InsertionPoint <> ValueNone then size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeStringSize(me.InsertionPoint.Value)
                if me.Content <> ValueNone then size <- size + 1 + global.Google.Protobuf.CodedOutputStream.ComputeStringSize(me.Content.Value)
                if me.GeneratedCodeInfo <> ValueNone then size <- size + 2 + global.Google.Protobuf.CodedOutputStream.ComputeMessageSize(me.GeneratedCodeInfo.Value)
                if not <| isNull me._UnknownFields then size <- size + me._UnknownFields.CalculateSize()
                size
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            member private me.MergeFrom(other: File) =
                if other.Name <> ValueNone
                then me.Name <- other.Name
                if other.InsertionPoint <> ValueNone
                then me.InsertionPoint <- other.InsertionPoint
                if other.Content <> ValueNone
                then me.Content <- other.Content
                if other.GeneratedCodeInfo <> ValueNone
                then
                    if me.GeneratedCodeInfo.IsNone
                    then me.GeneratedCodeInfo <- ValueSome(global.Google.Protobuf.FSharp.Reflection.GeneratedCodeInfo.empty())
                    (me.GeneratedCodeInfo.Value :> global.Google.Protobuf.IMessage<global.Google.Protobuf.FSharp.Reflection.GeneratedCodeInfo>).MergeFrom(other.GeneratedCodeInfo.Value)
                me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFrom(me._UnknownFields, other._UnknownFields)
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            member private me.InternalMergeFrom(input: byref<global.Google.Protobuf.ParseContext>) =
                let mutable tag = input.ReadTag()
                while tag <> 0u do
                    match tag with
                    | 10u ->
                        me.Name <- ValueSome(input.ReadString())
                    | 18u ->
                        me.InsertionPoint <- ValueSome(input.ReadString())
                    | 122u ->
                        me.Content <- ValueSome(input.ReadString())
                    | 130u ->
                        if me.GeneratedCodeInfo.IsNone
                        then me.GeneratedCodeInfo <- ValueSome(global.Google.Protobuf.FSharp.Reflection.GeneratedCodeInfo.empty())
                        input.ReadMessage(me.GeneratedCodeInfo.Value)
                    | _ ->
                        me._UnknownFields <- global.Google.Protobuf.UnknownFieldSet.MergeFieldFrom(me._UnknownFields, &input)
                    tag <- input.ReadTag()
            interface global.Google.Protobuf.IBufferMessage with
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.InternalMergeFrom(ctx) = me.InternalMergeFrom(&ctx)
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.InternalWriteTo(ctx) = me.InternalWriteTo(&ctx)
            interface global.Google.Protobuf.IMessage<File> with
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.Clone() = me.Clone()
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.MergeFrom(other) = me.MergeFrom(other)
            interface global.Google.Protobuf.IMessage with
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.CalculateSize() = me.CalculateSize()
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.MergeFrom(input) = input.ReadRawMessage(me)
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member me.WriteTo(output) = output.WriteRawMessage(me)
                [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
                member __.Descriptor = global.Google.Protobuf.FSharp.Compiler.PluginReflection.CodeGeneratorResponse_File_Descriptor()
        module File =
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            let internal DefaultValue = {
                File._UnknownFields = null
                File.Name = ValueNone
                File.InsertionPoint = ValueNone
                File.Content = ValueNone
                File.GeneratedCodeInfo = ValueNone
            }
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            let empty () = {
                File._UnknownFields = null
                File.Name = ValueNone
                File.InsertionPoint = ValueNone
                File.Content = ValueNone
                File.GeneratedCodeInfo = ValueNone
            }
            [<global.System.Diagnostics.DebuggerNonUserCodeAttribute>]
            let Parser = global.Google.Protobuf.MessageParser<File>(global.System.Func<_>(empty))
            let NameFieldNumber = 1
            let InsertionPointFieldNumber = 2
            let ContentFieldNumber = 15
            let GeneratedCodeInfoFieldNumber = 16
// End of auto-generated code
